(progn
  (defmacro foomac0(n) `(+ 1 ,n))
  (defmacro foomac1(n) `(+ 1 (foomac0 ,n))))
(test "nested macros work as before"
  :valueof (foomac1 2)
  :should be 4)

(wt-eval '(mac foomac2(n) `(+ ,n 1)))
(test "simple mac"
  :valueof (foomac2 32)
  :should be 33)

(wt-eval '(def foomac3(x) `(_let ,$x ,x (+ 1 ,$x))))
(wt-eval '(mac foomac4(x) (foomac3 x)))
(test "mac sees $vars inside defs"
  :valueof (foomac4 3)
  :should be 4)

(wt-eval '(mac foomac5(o$x) `(* ,$x ,$x)))
(test "mac handles o$vars"
  :valueof (macex1 '(foomac5 3))
  :should match '(let* ((_ 3)) (* _ _)))
(test "mac handles o$vars - 2"
  :valueof (type-of (caar (cadr (macex1 '(foomac5 3)))))
  :should be 'symbol)

(test "o$vars eval exactly once"
  :valueof (_let counter 0
             (foomac5 (progn (incf counter)
                           3))
             counter)
  :should be 1)
