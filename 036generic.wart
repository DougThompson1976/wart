(mac wart-defgeneric(name args . body)
  `(generic-expander ,name ,$allargs ,args ,body
     (apply ',name (transform-last [coerce _ 'cons] ,$allargs))))
(defover defgeneric wart-defgeneric)

(mac defgeneric*(name args . body)
  `(generic-expander ,name ,$allargs ,args ,body
     (apply ',name (map0 [coerce _ 'cons] ,$allargs))))

(mac deftransform(name args . body)
  `(generic-expander ,name ,$allargs ,args ,body
     (coerce (apply ',name (transform-last [coerce _ 'cons] ,$allargs))
             (type (last ,$allargs)))))

(mac deftransform*(name args . body)
  `(generic-expander ,name ,$allargs ,args ,body
     (coerce (apply ',name (map0 [coerce _ 'cons] ,$allargs))
             (type (last ,$allargs)))))

(mac wart-defmethod(name args type . body)
  (if (no body)
    `(wipe (gethash ',type (gethash ',name vtables*)))
    `(= (gethash ',type (gethash ',name vtables*))
        (fn ,args
          ,@body))))
(defover defmethod wart-defmethod)



;; Internals

(def transform-last(f xs)
  (if (cdr xs)
    (cons car.xs (transform-last f cdr.xs))
    (call list^f car.xs)))

(mac generic-expander(name allargs args body not-found)
  `(do
     (init-vtable ,name ,args ,@body)
     (defun ,name(&rest ,allargs)
       (let ,$lastarg (last ,allargs)
         (aif (aand (gethash ',name vtables*)
                    (call it^type^last ,allargs))
           (apply it ,allargs)
           (if (isnt ,$lastarg
                     (as cons ,$lastarg))
             ,not-found
             (apply (fn ,args
                      ,@body)
                    ,allargs)))))))

(= vtables* (table))
(mac init-vtable(name args . body)
  `(= (gethash ',name vtables*)
     (let ,$basefn (fn ,args ,@body)
        ; Assume body handles primitives by default. Can be overridden.
        (obj null ,$basefn
             boolean ,$basefn
             symbol ,$basefn
             standard-char ,$basefn
             string ,$basefn
             bit ,$basefn
             integer ,$basefn
             single-float ,$basefn
             cons ,$basefn))))
