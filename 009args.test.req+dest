(defun foo() 34)
(test-wart "simple defun works as before"
  :valueof (foo)
  :should be 34)

(progn
  (defun foo0() 3)
  (defun foo1() (+ 1 (foo0))))
(test-wart "nested defuns work as before"
  :valueof (foo1)
  :should be 4)

(progn
  (defmacro foo2(n) `(+ 1 ,n))
  (defmacro foo3(n) `(+ 1 (foo2 ,n))))
(test-wart "nested macros work as before"
  :valueof (foo3 2)
  :should be 4)

(test "get-arg works for required args"
  :valueof (multiple-value-list
             (get-arg 'c '(a b c) '(1 2 3)))
  :should be (list 3))

(test "get-arg works for varargs"
  :valueof (multiple-value-list
             (get-arg 'a 'a '(1 2 3)))
  :should be (list '(1 2 3)))

(test "get-arg works for destructured args"
  :valueof (multiple-value-list
             (get-arg 'b '(a (b c))
                         '(1 (2 3))))
  :should be (list 2))

(test "get-arg works for destructured args - 2"
  :valueof (multiple-value-list
             (get-arg 'f '(a (b c (d e f)))
                         '(1 (2 3 (4 5 6)))))
  :should be (list 6))

(test "get-arg works for missing destructured args"
  :valueof (multiple-value-list
             (get-arg 'x '(a (b c (d e f)))
                         '(1 (2 3 (4 5 6)))))
  :should be (list nil 'no-arg))

(test "get-arg works for nil args"
  :valueof (multiple-value-list (get-arg 'b '(a b) '(3 nil)))
  :should be (list nil))

(test "get-arg flags missing, hopefully optional, params - 1"
  :valueof (multiple-value-list (get-arg 'a '(a) ()))
  :should be (list nil 'no-arg))



(wt-eval '(def foo4() 34))
(test-wart "simple def"
  :valueof (foo4)
  :should be 34)

(wt-eval '(mac foo5(n) `(+ ,n 1)))
(test-wart "simple mac"
  :valueof (foo5 32)
  :should be 33)

(wt-eval '(def foo6() (cons 3 4)))
(test-wart "def 2"
  :valueof (foo6)
  :should be (cons 3 4))

(wt-eval '(def foo8(b) b))
(test-wart "'required' params are really just optional"
  :valueof (foo8)
  :should be nil)

(wt-eval '(def foo9((a b)) b))
(test-wart "destructured args"
  :valueof (foo9 '(3 4))
  :should be 4)

; integration test: bracket + fn + call
(test-wart "call works on lambdas"
  :valueof (call [+ _ 1] 3)
  :should be 4)
