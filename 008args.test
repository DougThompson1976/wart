(defun foo() 34)
(test-wart "simple defun works as before"
  :valueof (foo)
  :should be 34)

(progn
  (defun foo0() 3)
  (defun foo1() (+ 1 (foo0))))
(test-wart "nested defuns work as before"
  :valueof (foo1)
  :should be 4)

(progn
  (defmacro foo2(n) `(+ 1 ,n))
  (defmacro foo3(n) `(+ 1 (foo2 ,n))))
(test-wart "nested macros work as before"
  :valueof (foo3 2)
  :should be 4)

(test "keyword-args works"
  :valueof (keyword-args '(1 2 :a 3) ())
  :should be '((a . 3)))

(test "keyword-args works with rest args"
  :valueof (keyword-args '(1 2 :a 3) 'a)
  :should be '((a 3)))

(test "strip-keyword-args works"
  :valueof (strip-keyword-args '(1 2 :a 3 4) ())
  :should be '(1 2 4))

(test "strip-keyword-args works on rest args"
  :valueof (strip-keyword-args '(1 2 :a 3 4) 'a)
  :should be '(1 2))

(test "optional-alist works - 1"
  :valueof (optional-alist 'a)
  :should be nil)
(test "optional-alist 1"
  :valueof (optional-alist '(a b c))
  :should be nil)
(test "optional-alist 2"
  :valueof (optional-alist '(a b c ? d e))
  :should be '((d . e)))
(test "optional-alist 3"
  :valueof (optional-alist '(a b c ? d e f))
  :should be '((d . e) (f)))
(test "optional-alist 4"
  :valueof (optional-alist '(a b c ? d e f nil))
  :should be '((d . e) (f . nil)))
(test "optional-alist 5"
  :valueof (optional-alist '(a b c ? d e f nil . g))
  :should be '((d . e) (f . nil)))

(test "get-arg works for missing arg"
  :valueof (multiple-value-list
             (get-arg 'c 'a 1 ()))
  :should be (list nil 'no-arg))

(test "get-arg works for required args"
  :valueof (multiple-value-list
             (get-arg 'c '(a b c) '(1 2 3) ()))
  :should be (list 3))

(test "get-arg works for varargs"
  :valueof (multiple-value-list
             (get-arg 'a 'a '(1 2 3) ()))
  :should be (list '(1 2 3)))

(test "get-arg works for rest args"
  :valueof (multiple-value-list
             (get-arg 'd '(a (b c) . d) '(1 (2 3) 4 5 6) ()))
  :should be (list '(4 5 6)))

(test "get-arg works for destructured args"
  :valueof (multiple-value-list
             (get-arg 'b '(a (b c))
                         '(1 (2 3)) ()))
  :should be (list 2))

(test "get-arg works for destructured args - 2"
  :valueof (multiple-value-list
             (get-arg 'f '(a (b c (d e f)))
                         '(1 (2 3 (4 5 6))) ()))
  :should be (list 6))

(test "get-arg works for missing destructured args"
  :valueof (multiple-value-list
             (get-arg 'x '(a (b c (d e f)))
                         '(1 (2 3 (4 5 6))) ()))
  :should be (list nil 'no-arg))

(test "get-arg works for destructuring and rest args"
  :valueof (multiple-value-list
             (get-arg 'g '(a (b c (d e f) . g))
                         '(1 (2 3 (4 5 6) 7 8)) ()))
  :should be (list '(7 8)))

(test "get-arg works for destructuring and rest args - 2"
  :valueof (multiple-value-list
             (get-arg 'f '(a (b c (d e f) . g))
                       '(1 (2 3 (4 5 6) 7 8)) ()))
  :should be (list 6))

(test "get-arg works for destructuring and rest args - 3"
  :valueof (multiple-value-list
             (get-arg 'x '(a (b c (d e f) . g))
                         '(1 (2 3 (4 5 6) 7 8)) ()))
  :should be (list nil 'no-arg))

(test "get-arg works for destructuring and rest args - 4"
  :valueof (multiple-value-list
             (get-arg 'f '(a (b c (d e . f) . g))
                         '(1 (2 3 (4 5 6 7) 7 8)) ()))
  :should be (list '(6 7)))

(test "get-arg works for destructuring and rest args - 5"
  :valueof (multiple-value-list
             (get-arg 'f '(a (b c (d e . f) . g))
                         '(1 (2 3 (4 5) 7 8)) ()))
  :should be (list nil))

(test "get-arg works for keyword args"
  :valueof (multiple-value-list
             (get-arg 'a '(a (b c (d e f) . g))
                         '((2 3 (4 5 6) 7 8)) '((a . 1))))
  :should be (list 1))

(test "get-arg works on args with keywords"
  :valueof (multiple-value-list
             (get-arg 'd '(a (b c (d e f) . g))
                         '((2 3 (4 5 6) 7 8)) '((a . 1))))
  :should be (list 4))

(test "get-arg for missing rest args"
  :valueof (multiple-value-list (get-arg 'rest 'rest () ()))
  :should be (list nil))

(test "get-arg works for nil args"
  :valueof (multiple-value-list (get-arg 'b '(a b) '(3 nil) ()))
  :should be (list nil))

(test "get-arg returns an illegal literal for missing, hopefully optional, params - 1"
  :valueof (multiple-value-list (get-arg 'a '(a) () ()))
  :should be (list nil 'no-arg))

(test "get-arg returns an illegal literal for missing, hopefully optional, params - 2"
  :valueof (multiple-value-list (get-arg 'e '(a b c e f . d) '(1 2 3) ()))
  :should be (list nil 'no-arg))



(wt-eval '(def foo4() 34))
(test-wart "simple def"
  :valueof (foo4)
  :should be 34)

(wt-eval '(mac foo5(n) `(+ ,n 1)))
(test-wart "simple mac"
  :valueof (foo5 32)
  :should be 33)

(wt-eval '(def foo6() (cons 3 4)))
(test-wart "def 2"
  :valueof (foo6)
  :should be (cons 3 4))

(wt-eval '(def foo7 args args))
(test-wart "just a rest arg without parens"
    :valueof (foo7 3 4 5)
    :should be '(3 4 5))

(wt-eval '(def foo8(a . b) b))
(test-wart "dotted rest"
  :valueof (foo8 3 4)
  :should be '(4))

(test-wart "rest args are optional"
  :valueof (foo8 3)
  :should be nil)

(test-wart "'required' params are really just optional"
  :valueof (foo8)
  :should be nil)

(wt-eval '(def foo9((a b)) b))
(test-wart "destructured args"
  :valueof (foo9 '(3 4))
  :should be 4)

(wt-eval '(def foo10((a b) . c) b))
(test-wart "destructured args + dotted rest"
  :valueof (foo10 '(3 4) 5)
  :should be 4)

(test-wart "destructured args + dotted rest for fn"
  :valueof (call (fn ((a b) . c) b) '(3 4) 5)
  :should be 4)

(wt-eval '(def foo12(a b) (- a b)))
(test-wart "allow param names"
  :valueof (foo12 :a 3 :b 4)
  :should be -1)

(test-wart "allow just some param names"
  :valueof (foo12 :a 3 4)
  :should be -1)

(test-wart "allow args in any order when giving param names"
  :valueof (foo12 :b 3 :a 4)
  :should be 1)

(test-wart "take positional args in order after keyword args have been matched"
  :valueof (foo12 3 :a 4)
  :should be 1)

(wt-eval '(def foo13(a ? b nil) (cons a b)))
(test-wart "optional param"
  :valueof (foo13 3)
  :should be '(3))

(wt-eval '(def foo14(a ? b 4) (cons a b)))
(test-wart "named arg around optional params"
  :valueof (foo14 :a 3)
  :should be '(3 . 4))

(test-wart "optional args should override defaults"
  :valueof (foo14 3 2)
  :should be '(3 . 2))

(test-wart "named optional args should override defaults"
  :valueof (foo14 3 :b 2)
  :should be '(3 . 2))

(test-wart "nil optional arg overrides default"
  :valueof (foo14 3 :b nil)
  :should be '(3))

(test-wart "nil optional arg overrides default without naming"
  :valueof (foo14 3 nil)
  :should be '(3))

(test-wart "defaults can be variables"
  :valueof (_let a 3 (call (fn(? x a) x)))
  :should be 3)

(wt-eval '(def foo15(a ? b 4 c nil) (cons b c)))
(test-wart "multiple optional params"
  :valueof (foo15 3)
  :should be '(4))

(wt-eval '(def foo16(a . b) b))
(test-wart "rest args can be named"
  :valueof (foo16 3 :b 4 5)
  :should be '(4 5))

(wt-eval '(def foo17(a ? b 3 . c) (cons b c)))
(test-wart "optional + named rest args"
  :valueof (foo17 2 :c 3)
  :should be '(3 3))

(test-wart "rest args take precedence over optionals"
  :valueof (foo17 1 4 5)
  :should be '(3 4 5))

(test-wart "optional + named rest args - 2"
  :valueof (foo17 2 4 :c 5)
  :should be '(4 5))

(test-wart "optional + named rest args - 3"
  :valueof (foo17 2 4 1)
  :should be '(3 4 1))

(test-wart "optional + named rest args - 4"
  :valueof (foo17 2 :b 4 3)
  :should be '(4 3))

(wt-eval '(def foo18(a ? b nil c 3 . body) (list b c body)))
(test-wart "convention: :do => :body"
  :valueof (foo18 3 4 :do 4 5)
  :should be '(4 3 (4 5)))

(test-wart "tuples works"
  :valueof (tuples '(1 2 3 4 5 6) 3)
  :should be '((1 2 3) (4 5 6)))

(test-wart "tuples works with unbalanced lists"
  :valueof (tuples '(1 2 3 4 5) 3)
  :should be '((1 2 3) (4 5)))

(test-wart "tuples works with n 1"
  :valueof (tuples '(1 2 3 4 5) 1)
  :should be (map 'list #'list '(1 2 3 4 5)))
