(init-vtable serialize(x) x)
(defgeneric serialize(x)
  x)
(defmethod serialize(x) cons
  (map 'serialize x))

(init-vtable unserialize(x) x)
(defgeneric unserialize(x)
  x)
(defmethod unserialize(x) cons
  (map 'unserialize x))



(def wart-read(? port stdin*)
  (unserialize read.port))
(defover read wart-read)

(def wart-write(x ? port stdout*)
  (write serialize.x :stream port))
(defover write wart-write)



(defmethod serialize(x) hash-table
  ; beware: all generics will see this as a hash, but only unserialize can handle it
  (annotate 'hash-table
            (map 'serialize (coerce x 'cons))))

(defmethod unserialize(x) hash-table
  (ret ans (table)
    (each (k v) (coerce rep.x 'hash-table)
      (= (call ans unserialize.k) unserialize.v))))



(def peek(stream)
  (peek-char nil stream nil))

(def wart-read-line(stream)
  (read-line stream nil))
(defover read-line wart-read-line)

(def slurp(stream)
  (intersperse #\newline
               (drain read-line.stream)))
