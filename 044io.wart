(def serialize(x)
  x)
(def serialize(x) :type cons
  (map 'serialize x))

; just to avoid errors while debugging
(def serialize(x) :type function
  'function)

(def unserialize(x)
  x)
(def unserialize(x) :type cons
  (map 'unserialize x))



(def wart-read(? stream stdin*)
  (unserialize read.stream))
(defover read wart-read)

(redef wart-write(x ? stream stdout*)
  (write serialize.x :stream stream))
(defover write wart-write)

(def ero args
  (w/stdout stderr*
    (apply 'writeln args)))



(def serialize(x) :type hash-table
  ; beware: all generics will see this as a hash, but only unserialize can handle it
  (annotate hash-table
            (map 'serialize (as cons x))))

(def unserialize(x) :type hash-table
  (ret ans (table)
    (each (k v) (as hash-table rep.x)
      (= (call ans unserialize.k) unserialize.v))))



(def peek(stream)
  (peek-char nil stream nil))

(def wart-read-line(stream)
  (read-line stream nil))
(defover read-line wart-read-line)

(def slurp(stream)
  (intersperse #\newline
               (drain read-line.stream)))
