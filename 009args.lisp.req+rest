;; Functions support complex arg lists in wart.

(defmacro def(name params &rest body)
  `(defun ,name ,@(compile-params params body)))

(defmacro mac(name params &rest body)
  (wt-transform `(defmacro ,name ,@(compile-params params body))))

(defmacro fn(params &rest body)
  `(lambda ,@(compile-params params body)))



;; Internals
;; Use let* everywhere here because wart will soon override let

; returns arglist and body suitable for insertion into defun or lambda
; new body understands keyword args
; params format (optionals* ? lazy-optionals* . rest)
; optionals can be destructured
; lazy optionals require keywords if rest is present
(defun compile-params(params body)
  (let* ((args  (uniq)))
    `((&rest ,args)
        (let* ,(append
                 (get-required-arg-exprs params args)
                 (get-rest-arg-expr params args))
          ,@body))))

(defun get-required-arg-exprs(params args)
  (let ((required-params (required-params params)))
    (map 'list
         (lambda(param)
           (list param
                 `(get-arg ',param ',required-params ,args)))
         required-params)))

(defun get-rest-arg-expr(params args)
  (let ((rest-param (rest-param params))
        (required-params (required-params params)))
    (if rest-param
      (list (list rest-param
                  `(get-arg ',rest-param ',required-params ,args :no-params (lambda(x) x)))))))

(defun get-arg(var params args &key (no-params (lambda(x) nil)))
  (cond
    ((no params)  (values (call no-params args)
                          'no-arg))
    ((is params var)  args)
    ((not (consp params))   (values nil 'no-arg))
    ((no args)  (values nil 'no-arg))
    ((is (car params) var)  (car args))
    (t   (get-arg var (cdr params) (cdr args) :no-params no-params))))



;; Slicing and dicing params

(defun required-params(params)
  (if (consp params)
    (cons (car params)
          (required-params (cdr params)))))

(defun rest-param(params)
  (cond
    ((no params)  ())
    ((rest-param-p params)  params)
    (t   (rest-param (cdr params)))))

(defun rest-param-p(params)
  (not (consp params)))
