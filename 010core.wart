(special-form type type-of) ; reserved keyword. bad dog in the manger CL!

(def id(? x nil) x)

(def isa(elem type)
  (is (type elem) type))

(def isnt(x y) (no (is x y)))

(def pos(test s)
  (if (isa test 'function)
    (position-if test s)
    (position test s)))

(def singlep(x)
  (and (isa x 'cons)
       (no (cdr x))))

(def pairp(x)
  (and (isa x 'cons)
       (isa (cdr x) 'cons)
       (no (cddr x))))

(synonym len length
         cut subseq
         rev reverse
         macex macroexpand
         macex1 macroexpand-1
         err error
         join append ; todo: make generic
         keep remove-if-not
         trunc truncate)

(mac wc-map(f . seqs)
  `(map 'list ,f ,@seqs)) ; recursive map won't be transformed
(special-form map wc-map)

(def pair(xs ? f #'list)
  (if (no xs)
       nil
      (no (cdr xs))
       (list (list (car xs)))
      (cons (call f (car xs) (cadr xs))
            (pair (cddr xs) f))))

(mac with(parms . body)
  `(call (fn ,(map #'car (pair parms))
           ,@body)
         ,@(map #'cadr (pair parms))))

(mac wc-let(var val . body)
  `(with (,var ,val) ,@body))
(special-form let wc-let)

(mac withs(parms . body)
  (if (no parms)
      `(do ,@body)
      `(let ,(car parms) ,(cadr parms)
         (withs ,(cddr parms) ,@body))))

(mac w/uniq(names . body)
  (if (consp names)
      `(with ,(apply #'join nil (map (fn(n) (list n '(uniq)))
                                     names))
         ,@body)
      `(let ,names (uniq) ,@body)))

(mac iflet(var expr then . rest)
  (w/uniq gv
    `(let ,gv ,expr
       (if ,gv (let ,var ,gv ,then) ,@rest))))

(mac whenlet(var expr . body)
  `(iflet ,var ,expr (do ,@body)))

(mac aif(expr . body)
  `(let it ,expr
     (if it
         ,@(if (cddr body)
               `(,(car body) (aif ,@(cdr body)))
               body))))

(mac awhen(expr . body)
  `(let it ,expr (if it (do ,@body))))

(mac aand args
  (if (no args)
      't
      (no (cdr args))
       (car args)
      `(let it ,(car args) (and it (aand ,@(cdr args))))))

(mac ret(var val . body)
  `(let ,var ,val ,@body ,var))

(mac rfn(name parms . body)
  `(labels ((,name ,parms ,@body))
     #',name))

(mac afn(parms . body)
  `(rfn self ,parms ,@body))

(mac in(x . choices)
  (w/uniq g
    `(let ,g ,x
       (or ,@(map (fn (c) `(is ,g ,c)) choices)))))

(mac caselet(var expr . args)
  (let ex (afn(args)
            (if (no (cdr args))
                (car args)
                `(if (iso ,var ',(car args))
                     ,(cadr args)
                     ,(self (cddr args)))))
    `(let ,var ,expr ,(call ex args))))

(mac wc-case(expr . args)
  `(caselet ,(uniq) ,expr ,@args))
(special-form case wc-case)
