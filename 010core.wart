(special-form type type-of) ; reserved keyword. bad dog in the manger CL!

(def id(? x nil) x)

(defun isa(elem type)
  (eq (type elem) type))

(def isnt(x y) (no (is x y)))

(def pos(test s)
  (if (isa test 'function)
    (position-if test s)
    (position test s)))

(def singlep(x)
  (and (isa x 'cons)
       (no (cdr x))))

(def pairp(x)
  (and (isa x 'cons)
       (isa (cdr x) 'cons)
       (no (cddr x))))

(synonym trunc truncate
         len length
         uniq gensym
         cut subseq
         rev reverse
         macex macroexpand
         macex1 macroexpand-1
         err error
         keep remove-if-not)

(mac wc-map(f . seqs)
  `(map ',(_type-specifier (car seqs)) ,f ,@seqs)) ; recursive map won't be transformed
(special-form map wc-map)

(def _type-specifier(x)
  (if (isa x 'cons)
    'list
    (type x)))

(def pair(xs ? f #'list)
  (if (no xs)
       nil
      (no (cdr xs))
       (list (list (car xs)))
      (cons (call f (car xs) (cadr xs))
            (pair (cddr xs) f))))

(mac with(parms . body)
  `(call (fn ,(map #'car (pair parms))
           ,@body)
         ,@(map #'cadr (pair parms))))

(mac wc-let(var val . body)
  `(with (,var ,val) ,@body))
(special-form let wc-let)

(mac withs(parms . body)
  (if (no parms)
      `(do ,@body)
      `(let ,(car parms) ,(cadr parms)
         (withs ,(cddr parms) ,@body))))

(mac each(var vals . body)
  `(loop for ,var in ,vals do ,@body))

(mac aand(a b) `(let it ,a (and it ,b)))

(mac w/uniq(names . body)
  (if (consp names)
      `(with ,(apply #'append (map (fn(n) (list n '(uniq)))
                                   names))
         ,@body)
      `(let ,names (uniq) ,@body)))
