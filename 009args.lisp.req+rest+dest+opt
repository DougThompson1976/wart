;; Functions support complex arg lists in wart.

(defmacro def(name params &rest body)
  `(defun ,name ,@(compile-params params body)))

(defmacro mac(name params &rest body)
  (wt-transform `(defmacro ,name ,@(compile-params params body))))

(defmacro fn(params &rest body)
  `(lambda ,@(compile-params params body)))



;; Internals
;; Use let* everywhere here because wart will soon override let

; returns arglist and body suitable for insertion into defun or lambda
; new body understands keyword args
; params format (optionals* ? lazy-optionals* . rest)
; optionals can be destructured
; lazy optionals require keywords if rest is present
(defun compile-params(params body)
  (let* ((args  (uniq)))
    `((&rest ,args)
        (let* ,(append
                 (get-required-arg-exprs params args)
                 (get-optional-arg-exprs params args)
                 (get-rest-arg-expr params args))
          ,@body))))

(defun get-required-arg-exprs(params args)
  (let ((required-params (required-params params)))
    (map 'list
         (lambda(param)
           (list param
                 `(get-arg ',param ',required-params ,args)))
         (flatten required-params))))

(defun get-rest-arg-expr(params args)
  (let ((rest-param (rest-param params)))
    (if rest-param
      (list (list rest-param `(get-greedy-rest-args ',rest-param ',(required-params params) ,args))))))

(defun get-optional-arg-exprs(params args)
  (let ((optional-alist (optional-alist params)))
    (map 'list
         (lambda(param)
           (list param
                 `(fa (get-arg ',param
                               ',(strip-defaults params)
                               ,args)
                      ,(alref param optional-alist))))
         (map 'list 'car optional-alist))))

(defun get-arg(var params args)
  (cond
    ((no params)  (values nil 'no-arg))
    ((is params var)  args)
    ((not (consp params))   (values nil 'no-arg))
    ((no args)  (values nil 'no-arg))
    ((is (car params) var)  (car args))
    (t   (fa (get-arg var (car params) (car args))
             (get-arg var (cdr params) (cdr args))))))

(defun get-greedy-rest-args(var params args)
  (cond
    ((no params) args)
    ((is params var)  args)
    ((no args)  (values nil 'no-arg))
    ((is (car params) var)  (car args))
    (t   (get-greedy-rest-args var (cdr params) (cdr args)))))



;; Slicing and dicing params

(defun required-params(params)
  (if (and (consp params)
           (not (is '? (car params))))
    (cons (car params)
          (required-params (cdr params)))))

(defun rest-param(params)
  (cond
    ((no params)  ())
    ((rest-param-p params)  params)
    (t   (rest-param (cdr params)))))

(defun strip-defaults(params &optional past-?)
  (cond
    ((no params)  ())
    ((rest-param-p params)  params)
    ((is (car params) '?)   (strip-defaults (cdr params) t))
    (t   (cons (car params)
               (strip-defaults
                 (if past-? (cddr params) (cdr params))
                 past-?)))))

(defun optional-alist(params)
  (partition-optional-params (strip-required (strip-rest params))))

(defun partition-optional-params(oparams)
  (cond
    ((not (consp oparams))  ())
    ((not (consp (cdr oparams)))  (list oparams))
    (t   (cons (cons (car oparams)
                     (cadr oparams))
               (partition-optional-params (cddr oparams))))))

(defun strip-rest(params)
  (cond
    ((no params) ())
    ((rest-param-p params)  ())
    (t   (cons (car params)
               (strip-rest (cdr params))))))

(defun strip-required(params)
  (if (consp params)
    (let* ((optargs (member '? params))) ; strip-rest has already run
      (if optargs
        (cdr optargs)
        ()))
    params))



(defun rest-param-p(params)
  (not (consp params)))
