def (close f) :case (isa infile f)
  close_infile.f

def (close f) :case (isa outfile f)
  close_outfile.f

def (close f) :case (isa socket f)
  close_socket.f

mac (with `infile name ... body)
  `(between (bind stdin (infile ,name)) :and (close&unbind stdin)
     ,@body)

mac (with `outfile name ... body)
  `(between (bind stdout (outfile ,name)) :and (close&unbind stdout)
     ,@body)

mac (with `instring s ... body)
  `(between (bind stdin (instring ,s)) :and (close&unbind stdin)
     ,@body)

mac (with `outstring ... body)
  `(between (bind stdout (outstring)) :and (close&unbind stdout)
     ,@body
     outstring_buffer.stdout)

mac (with `stdin fd ... body)
  `(between (bind stdin ,fd) :and (close&unbind stdin)
     ,@body)

mac (with `stdout fd ... body)
  `(between (bind stdout ,fd) :and (close&unbind stdout)
     ,@body)

def (ern ... args)
  (with stdout stderr
    (prn @args))

def (prrn ... args)
  prn @args ""

def (infile fd) :case num?.fd
  infd.fd
def (outfile fd) :case num?.fd
  outfd.fd

def (infile s) :case (isa socket s)
  infd+fd.s
def (outfile s) :case (isa socket s)
  outfd+fd.s

mac (drain expr eof)
  `(collect+awhile ,expr
     yield.it)

def (pr ... args) :case ~single?.args
  (map pr args)
  car.args

# print with timestamp
def (log ... args)
  (date)
  (prn @args)

# during debugging, print a value with a distinguishing label
def (dbg msg ... args)
  (pr msg)  # don't return the label like prn would
  (prn @args)
