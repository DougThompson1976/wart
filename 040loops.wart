(mac until(test . body)
  `(while (not ,test)
      ,@body))

(mac forever body
  `(while t ,@body))

(mac whilet (var test . body)
  `(call (rfn ,$f (,$p)
           (let ,var ,$p
             (when ,var ,@body (,$f ,test))))
         ,test))

(mac awhile(expr . body)
  `(whilet it ,expr
    ,@body))

(mac for(var init term inc . body)
  `(let ,var ,init
     (while ,term
        ,@body
        ,inc)))

(mac down(var init min . body)
  `(for ,var ,init (> ,var ,min) (= ,var (1- ,var))
     ,@body))

(mac repeat(n . body)
  `(for ,$var 0 (< ,$var ,n) (++ ,$var)
      ,@body))

(mac drain(expr ? eof nil)
  `(with (,$acc nil
          ,$done nil)
    (while (no ,$done)
      (let ,$res ,expr
        (if (is ,$res ,eof)
          (set ,$done)
          (push ,$res ,$acc))))
    (rev ,$acc)))

(mac each(var xs . body)
  `(some (fn(,var) ,@body nil)
         ,xs))
