; http://arclanguage.org/item?id=12878
(def accumulate(over ? starting nil taking 'car folding-with 'cons next 'cdr unless 'no)
  (call (afn(xs total)
          (if (call-fn unless xs)
              total
              (self (call next xs)
                    (call folding-with
                          (call taking xs)
                          total))))
        over starting))

(mac until(test . body)
  `(while (not ,test)
      ,@body))

(mac forever body
  `(while t ,@body))

(mac whilet (var test . body)
  `(call (rfn ,$f (,$p)
           (let ,var ,$p
             (when ,var ,@body (,$f ,test))))
         ,test))

(mac awhile(expr . body)
  `(whilet it ,expr
    ,@body))

(mac whiler(var expr endval . body)
  `(withs (,var nil ,$f (testify ,endval))
     (while (no (call ,$f (= ,var ,expr)))
       ,@body)))

(mac for(var init term inc . body)
  `(let ,var ,init
     (while ,term
        ,@body
        ,inc)))

(mac down(var init min . body)
  `(for ,var ,init (> ,var ,min) (-- ,var)
     ,@body))

(mac repeat(n . body)
  `(for ,$var 0 (< ,$var ,n) (++ ,$var)
      ,@body))

(mac drain(expr ? eof nil)
  `(with (,$acc nil
          ,$done nil)
    (while (no ,$done)
      (let ,$res ,expr
        (if (iso ,$res ,eof)
          (set ,$done)
          (push ,$res ,$acc))))
    (rev ,$acc)))

(mac each(var xs . body)
  `(some (fn(,var) ,@body nil)
         ,xs))
