let $+ +
  def! + xs
    (reduce $+ xs 0)

let $- -
  def! - xs
    (reduce $- xs)

let $* *
  def! * xs
    (reduce $* xs 1)

let $/ /
  def! / xs
    (reduce $/ xs)

let $% %
  def! % xs
    (reduce $% xs)

mac ++(n)
  `(= ,n (+ ,n 1))

mac --(n)
  `(= ,n (- ,n 1))



let $< <
  def! < xs
    (all (fn((x y)) ($< x y))
         pairwise.xs)

def > xs
  (all (fn((x y)) (< y x))
       pairwise.xs)

def <= xs
  (none (fn((x y)) (< y x))
        pairwise.xs)

def >= xs
  (none (fn((x y)) (< x y))
        pairwise.xs)

def min args
  (best < args)

def max args
  (best > args)

def <(scorer) :case fn?.scorer
  (fn(x y)
    (< scorer.x scorer.y))



def zero?(n)
  (iso n 0)

def divides(nr dr)
  (zero?:% nr dr)

def even?(n)
  (divides n 2)

alias odd? ~even?

def sum(xs)
  (+ @xs)

def product(xs)
  (* @xs)
