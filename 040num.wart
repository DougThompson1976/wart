let $+ +
  def! + args
    (reduce $+ args 0)

let $- -
  def! - args
    (reduce $- args)

let $* *
  def! * args
    (reduce $* args 1)

let $/ /
  def! / args
    (reduce $/ args)

let $% %
  def! % args
    (reduce $% args)

mac ++(n)
  `(= ,n (+ ,n 1))

mac --(n)
  `(= ,n (- ,n 1))

def -(n . rest) :case !rest
  (- 0 n)



let $< <
  def! < args
    (all (fn((x y)) ($< x y))
         pairwise.args)

def > args
  (all (fn((x y)) (< y x))
       pairwise.args)

def <= args
  (none (fn((x y)) (< y x))
        pairwise.args)

def >= args
  (none (fn((x y)) (< x y))
        pairwise.args)

def min args
  (best < args)

def max args
  (best > args)

def <(scorer) :case fn?.scorer
  (fn(x y)
    (< scorer.x scorer.y))



def zero?(n)
  (iso n 0)

def divides(nr dr)
  (zero?:% nr dr)

def even?(n)
  (divides n 2)

alias odd? ~even?

def sum(seq)
  (+ @seq)

def product(seq)
  (* @seq)
