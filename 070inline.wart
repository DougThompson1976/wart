def to-with-expr(call bindings done)
  iflet f (and (~pos car.call done) ; skip recursive calls
               (lookup-or-eval car.call bindings))
    `(with ,(join @(rem caller-scope? (as list env.f)))
       ,(if (contains-quote sig.f)
          `((fn ,sig.f ,@body.f) ,@cdr.call)
          `(with (,sig.f ,(cons 'list cdr.call))
             ,@(collect:each expr body.f
                 (yield:to-with-expr expr
                                     (maybe cons env.f :to bindings)
                                     (cons car.call done))))))
    call



;; Internals

def lookup-or-eval(f bindings)
  (if
    sym?.f
      (if cons?.bindings
        (or (car.bindings f)
            (lookup-or-eval f cdr.bindings))
        bindings.f)
    (match '(fn . _) f)
      eval.f)

def contains-quote(expr)
  if ~cons?.expr
    quote?.expr
    (or (quote? car.expr)
        (quote? cdr.expr))

def caller-scope?(x)
  (match '(caller-scope . _) x)
