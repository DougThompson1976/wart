def inline(calls bindings)
  collect:each call calls
    if (or !call !cons?.call)
      yield call
      let f (or (if
                  (sym? car.call)
                    (lookup-binding car.call bindings)
                  (match '(fn . _) car.call)
                    (eval car.call))
                car.call)
        if (or ~callable?.f compiled-fn?.f)
          yield call
          each x (inline (apply-bindings body.f (cons (as table (gen-bindings sig.f cdr.call)) env.f))
                         (if env.f (cons env.f bindings) bindings))
            yield x



;; Internals

def gen-bindings(params args acc)
  if (and cons?.params quote?:car.params)
    (zap cdr params) ; inline never distinguishes quoted params
  (if
    !params ; base case
      acc
    ~cons?.params ; rest param
      (cons (list params (cons 'list args))
            acc)
    ~cons?:car.params
      (cons (list car.params car.args)
            (gen-bindings cdr.params cdr.args acc))
    :else ; destructured param
      (gen-bindings car.params car.args
               (gen-bindings cdr.params cdr.args acc)))

def apply-bindings(expr bindings)
  (if
    !cons?.expr
      (or (lookup-binding expr bindings)
          expr)
    quote?:car.expr
      expr
    backquote?:car.expr
      (apply-comma-bindings cdr.expr bindings)
    :else
      (cons (apply-bindings car.expr bindings)
            (apply-bindings cdr.expr bindings)))

def lookup-binding(sym bindings)
  (if
    !bindings
      nil
    !cons?.bindings
      bindings.sym
    :else
      (or (lookup-binding sym car.bindings)
          (lookup-binding sym cdr.bindings)))

def apply-comma-bindings(expr bindings)
  (if
    !cons?.expr
      expr
    unquote?:car.expr
      (or (lookup-binding cdr.expr bindings)
          (die "macro with free var: " cdr.expr))
    (match (cons unquote-splice '(_ _)) car.expr)
       matching (_ _f _var) car.expr
         let l (lookup-binding var bindings)
           if !l (die "macro with free var: " cadr:cdr:car.expr)
           if (~iso 'list car.l) (die cdr:car.expr " must be a list for now")
           (join (eval `(,f ,l)) ; ignores env in bindings
                 (apply-comma-bindings cdr.expr bindings))
    (match (cons unquote-splice '_) car.expr)
      let l (lookup-binding cdr:car.expr bindings)
        if !l (die "macro with free var: " cdr:car.expr)
        if (~match '(list . _) l) (die cdr:car.expr " must be a list for now")
        (join cdr.l
              (apply-comma-bindings cdr.expr bindings))
    :else
      (cons (apply-comma-bindings car.expr bindings)
            (apply-comma-bindings cdr.expr bindings)))
