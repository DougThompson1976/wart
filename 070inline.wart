def inline(calls bindings)
  collect:each call calls
    if (or !call !cons?.call)
      yield call
      let f (or (if (sym? car.call)
                  (lookup-binding car.call bindings))
                car.call)
        (if
          (or ~callable?.f compiled-fn?.f)
            yield call
          fn?.f
            each x (inline (apply-bindings body.f (cons (as table (gen-bindings sig.f cdr.call)) env.f))
                           (if env.f (cons env.f bindings) bindings))
              yield x
          inlinable-mac?.f
            each x (inline (apply-bindings body.f (cons (as table (gen-bindings sig.f cdr.call)) env.f))
                           (if env.f (cons env.f bindings) bindings))
              yield unqq.x
          :else
            yield call)



;; internals

def gen-bindings(params args acc)
  (if
    !params ; base case
      acc
    ~cons?.params ; rest param
      (cons (list params (cons 'list args))
            acc)
    (and quote?:car.params ~cons?:cdr.params) ; quoted rest param
      (cons (list cdr.params (cons 'list args))
            acc)
    (~cons? car.params)
      (cons (list car.params car.args)
            (gen-bindings cdr.params cdr.args acc))
    :else ; destructured param
      (gen-bindings car.params car.args
               (gen-bindings cdr.params cdr.args acc)))

def apply-bindings(expr bindings)
  if !cons?.expr
    (or (lookup-binding expr bindings) expr)
    (cons (apply-bindings car.expr bindings)
          (apply-bindings cdr.expr bindings))

def lookup-binding(sym bindings)
  (if
    !bindings
      nil
    !cons?.bindings
      bindings.sym
    :else
      (or (lookup-binding sym car.bindings)
          (lookup-binding sym cdr.bindings)))

def inlinable-mac?(f)
  and mac?.f
      (~cdr body.f) ; no support for multiple exprs for now
      (and cons?:body.f cons?:car:body.f (iso backquote car:car:body.f)) ; begins with quasiquote

alias unqq strip-backquote:strip-commas:strip-comma-splice

alias strip-backquote cadr

def strip-commas(x)
  (if
    ~cons?.x
      x
    (iso comma car.x)
      cadr.x
    :else
      (cons (strip-commas car.x)
            (strip-commas cdr.x)))

def strip-comma-splice(x)
  (if
    ~cons?.x
      x
    (and cons?:car.x (iso comma-splice car:car.x))
      if cdr:car.x
        (cons cadr:car.x
              (strip-comma-splice (cons (cons comma-splice cddr:car.x)
                                        cdr.x)))
        (strip-comma-splice cdr.x)
    :else
      (cons (strip-comma-splice car.x)
            (strip-comma-splice cdr.x)))
