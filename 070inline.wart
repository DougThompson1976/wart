def to-with-expr(call bindings)
  (let f (lookup-or-eval car.call bindings)
    `(with ,(join @(rem caller-scope? (as list env.f)))
       (with ,(join @(gen-bindings sig.f cdr.call))
          ,@body.f)))

def lookup-or-eval(f bindings)
  (or (if sym?.f
        bindings.f)
      (if (match '(fn . _) f)
        eval.f)
      f)

def caller-scope?(x)
  (match '(caller-scope . _) x)



;; Internals

def gen-bindings(params args acc)
  if (and cons?.params quote?:car.params)
    (zap cdr params) ; inline never distinguishes quoted params
  (if
    !params ; base case
      acc
    ~cons?.params ; rest param
      (cons (list params (cons 'listq args))
            acc)
    ~cons?:car.params
      (cons (list car.params car.args)
            (gen-bindings cdr.params cdr.args acc))
    :else ; destructured param
      (gen-bindings car.params car.args
               (gen-bindings cdr.params cdr.args acc)))
