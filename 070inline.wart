def to-with-expr(call bindings)
  (let f (lookup-or-eval car.call bindings)
    `(with ,(join @(rem caller-scope? (as list env.f)))
       (with ,(join @(gen-bindings sig.f cdr.call))
          ,@body.f)))

def lookup-or-eval(f bindings)
  (or (if sym?.f
        bindings.f)
      (if (match '(fn . _) f)
        eval.f)
      f)

def caller-scope?(x)
  (match '(caller-scope . _) x)



;; Internals

def gen-bindings(params args acc)
  if ~cons?.params
    (list (list params (cons 'list args)))
    (zip params args)
