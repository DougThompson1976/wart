(defcall hash-table table
  [gethash _ table])

(defset hash-table(table key value)
  (setf (gethash key table)
        value))

(defcoerce hash-table cons
  (fn(table)
    (ret ans '()
      (maphash (fn(k v)
                 (push (list k v) ans))
               table))))

(defcoerce cons hash-table
  (fn(l)
    (ret ans (table)
      (map (fn((a b))
             (= ans.a b))
           l))))

(defcoerce null hash-table
  [table])

(mac obj args
  `(as hash-table
       (list ,@(map (fn ((k v))
                       `(list ',k ,v))
                    pair.args))))

(def keys(table)
  (ret ans ()
    (maphash (fn(k v)
               (push k ans))
             table)))
