(mac iflet(var expr then . more-branches)
  (if (or then more-branches)
    `(let ,var ,expr
       (if ,var
         ,then
         (iflet ,var ,@more-branches)))
    expr))

(mac whenlet(var expr . body)
  `(iflet ,var ,expr (do ,@body)))

(mac aif(expr . branches)
  `(iflet it ,expr ,@branches))

(mac awhen(expr . body)
  `(let it ,expr (if it (do ,@body))))

(mac rfn(name parms . body)
  `(labels ((,name ,parms ,@body))
     #',name))

(mac afn(parms . body)
  `(rfn self ,parms ,@body))

(mac in(o$x . choices)
  `(or ,@(map (fn(c) `(is ,$x ,c))
              choices)))

(def testify(x)
  (or (function-value x)
      [iso _ x]))

(mac caselet(var expr . args)
  (let ex (afn(args)
            (if (no cdr.args)
                (car args)
                `(if (call (testify ,(car args)) ,var)
                     ,(cadr args)
                     ,(self cddr.args))))
    `(let ,var ,expr ,(call ex args))))

(mac wart-case(expr . args)
  `(caselet ,(uniq) ,expr ,@args))
(defover case wart-case)

(mac check(o$expr test ? alt nil)
  `(if (call ',test ,$expr)
     ,$expr
     ,alt))

(def orf fns
  (fn args
    (call (afn(fs)
            (and fs
                 (or (apply car.fs args)
                     (self cdr.fs))))
          fns)))

(def andf fns
  (fn args
    (call (afn(fs)
            (if (no fs)   t
                (no cdr.fs)   (apply car.fs args)
                              (and (apply car.fs args)
                                   (self cdr.fs))))
          fns)))

(mac ifcall(var . args)
  `(when (boundp ',var)
     (call ,var ,@args)))

(mac pushif(elem ls)
  `(aif ,elem
     (push it ,ls)))

(mac disabled body
  `(when nil ,@body))

(mac enabled body
  `(when t ,@body))
