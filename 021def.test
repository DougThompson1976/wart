(defun foo() 34)
(test "simple defun works as before"
  :valueof (foo)
  :should be 34)

(progn
  (defun foo0() 3)
  (defun foo1() (+ 1 (foo0))))
(test "nested defuns work as before"
  :valueof (foo1)
  :should be 4)

(progn
  (defmacro foo2(n) `(+ 1 ,n))
  (defmacro foo3(n) `(+ 1 (foo2 ,n))))
(test "nested macros work as before"
  :valueof (foo3 2)
  :should be 4)

(wt-eval '(def foo4(a) 34))
(test "def sets wart-signatures*"
  :valueof (gethash 'foo4 wart-signatures*)
  :should match '((_ _)))

(wt-eval '(def foo4(a b) a))
(test "subsequent defs overload"
  :valueof (len (gethash 'foo4 wart-signatures*))
  :should be 2)

(test "both versions of def coexist"
  :valueof (list (foo4 2) (foo4 3 2))
  :should be (list 34 3))

(test "final version always works"
  :valueof (foo4)
  :should be 34)

(test "pick the right version when using keyword args"
  :valueof (foo4 :a 3)
  :should be 34)

(wt-eval '(def foo5(a . b) a))
(test "handle too many args when there's a rest param"
  :valueof (foo5 3 4 5 6)
  :should be 3)

(wt-eval '(def foo6(a b) (+ a b)))
(wt-eval '(def foo6(a) a))
(test "use final version when there are too many args and no rest param"
  :valueof (foo6 3 4 5 6)
  :should be 7)
