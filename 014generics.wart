(ignore-redef
  (defgeneric len(x)
    (length x)))

(defmethod len(x) hash-table
  (hash-table-count x))



(ignore-redef
  (defgeneric* iso(x y)
    (or (is x y)
        (and (consp x)
             (consp y)
             (iso car.x car.y)
             (iso cdr.x cdr.y)))))

(defmethod iso(x y) hash-table
  (and (is (len keys.x) (len keys.y))
       (all
         (fn((k v))
           (iso y.k v))
         (coerce x 'cons))))



(defgeneric all(f xs)
  (if
    (no xs)   t
    (call f (car xs))   (all f cdr.xs)))

(ignore-redef
  (defgeneric* join args
    (apply #'concatenate (type (car args)) args)))
