(test "existing functions continue to work with call-fn"
  :valueof (call-fn (coerce 'car 'function) '(3))
  :should be 3)

(test "wart-apply works"
  :valueof (wart-apply '+ '(1 2 3))
  :should be 6)

(test "wart-apply works without quoting function symbol"
  :valueof (wart-apply + '(1 2 3))
  :should be 6)

(test "call-fn works on simple functions"
  :valueof (call-fn 'car '(1))
  :should be 1)

(test "call-fn works on simple functions"
  :valueof (call-fn 'car '(1))
  :should be 1)

(test "call-fn coerces to function when necessary"
  :valueof (call-fn 'car '(1))
  :should be 1)



(defmacro macfoo(a) `(+ 1 ,a))
(test "call handles macros"
  :valueof (call macfoo 3)
  :should be 4)

(test "call works"
  :valueof (call oddp 3)
  :should be t)

(pending-test "call works with labels"
  :valueof (labels ((x(_) 34))
             (call x 12))
  :should be 34)

(setf a 2)
(test "call handles macros with global bindings"
  :valueof (call macfoo a)
  :should be 3)

(test "call handles macros with bindings"
  :valueof (_let a 3 (call macfoo a))
  :should be 4)

(test "call handles incf macro"
  :valueof (_let a 32 (call incf a))
  :should be 33)

(test "call nests"
  :valueof (macex '(call (call a 3) 4))
  :should be '(call-fn (fslot (call a 3)) 4))



(test "inline-last works"
  :valueof (inline-last '(1 2 (3 4 5)))
  :should be '(1 2 3 4 5))

(test "inline-last works on nil"
  :valueof (inline-last nil)
  :should be nil)

(test "inline-last works on non-lists"
  :valueof (inline-last 3)
  :should be 3)

(test "inline-last works on singleton"
  :valueof (inline-last '(1))
  :should be '(1))

(test "inline-last works on flat list"
  :valueof (inline-last '(1 2 3))
  :should be '(1 2 3))

(test "inline-last works on nested list"
  :valueof (inline-last '(1 2 (3) 4 (5 6 (7))))
  :should be '(1 2 (3) 4 5 6 (7)))



(test "wart-coerce works on macros"
  :valueof (wart-coerce 'incf 'function)
  :should be 'incf)



(test "function-value works on primitives"
  :valueof (function-value 'oddp)
  :should satisfy true_value)

(test "function-value works on lambdas"
  :valueof (function-value (lambda()))
  :should satisfy true_value)

(test "function-value works on non-functions"
  :valueof (function-value 1)
  :should be nil)
