(defmacro macfoo(a) `(+ 1 ,a))
(test "call handles macros"
  :valueof (call macfoo 3)
  :should be 4)

(test "call works"
  :valueof (call oddp 3)
  :should be t)

(setf a 2)
(test "call handles macros with global bindings"
  :valueof (call macfoo a)
  :should be 3)

(test "call handles macros with bindings"
  :valueof (_let a 3 (call macfoo a))
  :should be 4)

(test "call handles incf macro"
  :valueof (_let a 32 (call incf a))
  :should be 33)

(test "call nests"
  :valueof (macex '(call (call a 3) 4))
  :should be '(funcall (wart-coerce (call a 3) 'function) 4))

(test "wart-apply works"
  :valueof (wart-apply '+ '(1 2 3))
  :should be 6)



(test "wart-coerce works on macros"
  :valueof (wart-coerce 'incf 'function)
  :should be 'incf)



(test "function-value works on primitives"
  :valueof (function-value 'oddp)
  :should satisfy true_value)

(test "function-value works on lambdas"
  :valueof (function-value (lambda()))
  :should satisfy true_value)

(test "function-value works on non-functions"
  :valueof (function-value 1)
  :should be nil)
