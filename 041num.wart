(defcoerce integer string
  'write-to-string)
(defcoerce string integer
  'read-from-string)

(defcoerce integer character
  'code-char)
(defcoerce character integer
  'char-code)

(def wart-> args
  (apply '> args))
(defover > wart->)
(def wart-< args
  (apply '< args))
(defover < wart-<)

(defover int wart-int)
(def int(x)
  (as integer x))
(def int(x ? base 10) :type string
  (parse-integer x :radix base))

(def str(x ? base 10) :type integer
  (write-to-string x :base base))



(def mapn(f a b)
  (call rev^accumulate :over a :taking f :next '1+ :unless [> _ b]))

(def sumn(f a b)
  (accumulate :over a :starting 0 :taking f :folding-with '+ :next '1+ :unless [> _ b]))

(def sumlist(f xs)
  (accumulate :over xs :starting 0 :taking f^car :folding-with '+))

(mac counting-calls(to . body)
  `(ret ,$c 0
     (let ,to (fn(,$a)
                (if ,$a
                  (++ ,$c)))
       ,@body)))



(= epsilon* 1e-4)
(def iso(a b) :case (or floatp.a floatp.b)
  (> epsilon*
     (abs (- a b))))

; generalization of round; specify number of decimal places to keep
(def fprec(places f)
  (/ (fround (* f (expt 10 places)))
     (expt 10 places)))

(def sq(x)
  (* x x))
