(defcoerce integer string
  'write-to-string)
(defcoerce string integer
  'read-from-string)

(defcoerce integer character
  'code-char)
(defcoerce character integer
  'char-code)

(defgeneric wart-> args
  (apply '> args))
(defover > wart->)
(defgeneric wart-< args
  (apply '< args))
(defover < wart-<)

(def wart-int(x ? base 10)
  (if (isa x 'string)
    (parse-integer x :radix base)
    (as integer x)))
(defover int wart-int)

(def int-string(x ? base 10)
  (write-to-string x :base base))

(def mapn(f a b)
  (call rev^accumulate :over a :taking f :next '1+ :unless [> _ b]))

(def sumn(f a b)
  (accumulate :over a :starting 0 :taking f :folding-with '+ :next '1+ :unless [> _ b]))

(def sumlist(f xs)
  (accumulate :over xs :starting 0 :taking f^car :folding-with '+))

(mac counting-calls(to . body)
  `(ret ,$c 0
     (let ,to (fn(,$a)
                (if ,$a
                  (++ ,$c)))
       ,@body)))
