; boundp now recognizes local vars
; assumes wiped vars are unbound
; macros aren't bindings
(defmacro wart-boundp(x)
  `(and (symbolp ',x)
        (errsafe ,x)))
(defover boundp wart-boundp)

(prn "B O Q " (wart-boundp 'until))
(prn "B O U " (wart-boundp until))
(if (not (is (wart-boundp 'until)
             (wart-boundp until)))
  (prn "q!=u"))
(defun foo(until)
  (prn "B I Q " (wart-boundp 'until))
  (prn "B I U " (wart-boundp until))
  (if (not (is (wart-boundp 'until)
               (wart-boundp until)))
    (prn "q!=U")))
(foo 'idfn)
(prn)

(defmacro wart-boundp(x)
  (if (symbolp x)
    `(errsafe ,x)
    ; ensure (boundp 'x) returns the same as (boundp x)
    (if (and (match x '(quote _))
             (symbolp (cadr x)))
      `(errsafe ,(cadr x)))))
;?   `(if (symbolp ',x)
;?      (errsafe ,x)
;?      (if (and (match ',x '(quote _))
;?               (symbolp (cadr ',x)))
;?        (errsafe (cadr ,x)))))
(defover boundp wart-boundp)

(prn "A O Q " (wart-boundp 'until))
(prn "A O U " (wart-boundp until))
(if (not (is (wart-boundp 'until)
             (wart-boundp until)))
  (prn "q!=u"))
(defun foo(until)
  (prn "A I Q " (wart-boundp 'until))
  (prn "A I U " (wart-boundp until))
  (if (not (is (wart-boundp 'until)
               (wart-boundp until)))
    (prn "q!=U")))
(foo 'idfn)
(prn)
