(test "inline - pass through unknown calls"
 :valueof (inline '((baz 3 4)) :env (table))
 :should be '((baz 3 4)))

(test "inline - replace with body"
 :valueof (inline '((foo)) (table 'foo (tag 'function (table 'body '(34)))))
 :should be '(34))

(test "inline - with args"
 :valueof (inline '((foo 3 4)) (table 'foo (tag 'function (table 'sig '(a b) 'body '((+ a b))))))
 :should be '((+ 3 4)))

(test "inline - flattens"
 :valueof (let env (table 'foo (tag 'function (table 'sig '(a b) 'body '((bar a b) (bar a b))))
                          'bar (tag 'function (table 'sig '(x y) 'body '((+ y x)))))
            (inline '((foo 3 4) (bar 3 4)) env))
 :should be '((bar 3 4) (bar 3 4) (+ 4 3)))

(test "inline - multiple levels"
 :valueof (let env (table 'foo (tag 'function (table 'sig '(a b) 'body '((bar a b))))
                          'bar (tag 'function (table 'sig '(x y) 'body '((+ y x)))))
            (inline (inline '((foo 3 4)) env) env))
 :should be '((+ 4 3)))

; assumes we haven't redefined cons
(test "inline - pass through compiled functions"
 :valueof (inline '((cons 3 4)) :env globals.)
 :should be '((cons 3 4)))

(test "inline - handles varargs params"
 :valueof (inline '((foo 3 4)) :env (table 'foo (tag 'function (table 'sig 'params 'body '(params)))))
 :should be '((list 3 4)))

(test "inline - handles varargs params - 2"
 :valueof (inline '((foo 3 4)) :env (table 'foo (tag 'function (table 'sig 'params 'body '((let (x y) params (list x y)))))))
 :should be '((let (x y) (list 3 4) (list x y))))

(test "inline - handles varargs params - 3"
 :valueof (inline '((foo a b)) :env (table 'foo (tag 'function (table 'sig 'params 'body '((let (x y) params (list x y)))))))
 :should be '((let (x y) (list a b) (list x y))))

(test "inline - handles rest params"
 :valueof (inline '((foo 3 4)) :env (table 'foo (tag 'function (table 'sig '(a . b) 'body '((boo a b))))))
 :should be '((boo 3 (list 4))))

(test "inline - handles destructured params"
 :valueof (inline '((foo (3 4) 5)) :env (table 'foo (tag 'function (table 'sig '((a b) . c) 'body '((boo a b c))))))
 :should be '((boo 3 4 (list 5))))
