(test "inline - pass through atoms"
 :valueof (inline '(34) (table))
 :should be '(34))

(test "inline - pass through unknown calls"
 :valueof (inline '((baz 3 4)) (table))
 :should be '((baz 3 4)))

(test "inline - replace with body"
 :valueof (inline '((foo)) (table 'foo (fn() 34)))
 :should be '(34))

(test "inline - with args"
 :valueof (inline '((foo 3 4)) (table 'foo (fn(a b) (+ a b))))
 :should be '((+ 3 4)))

(test "inline - flattens"
 :valueof (let env (table 'foo (fn(a b) (bar a b) (bar a b))
                          'bar (fn(x y) (+ y x)))
            (inline '((foo 3 4) (bar 3 4)) env))
 :should be '((+ 4 3) (+ 4 3) (+ 4 3)))

(test "inline - multiple levels"
 :valueof (let env (table 'foo (fn(a b) (bar a b))
                          'bar (fn(x y) (+ y x)))
            (inline '((foo 3 4)) env))
 :should be '((+ 4 3)))

(test "inline - pass through compiled functions"
 :valueof (and compiled-fn?.cons
               (inline '((cons 3 4)) globals.))
 :should be '((cons 3 4)))

(test "inline - handles varargs params"
 :valueof (inline '((foo 3 4)) (table 'foo (fn params params)))
 :should be '((list 3 4)))

(test "inline - handles varargs params - 2"
 :valueof (inline '((foo 3 4)) (table 'foo (fn params (let (x y) params (list x y)))))
 :should be '((let (x y) (list 3 4) (list x y))))

(test "inline - handles varargs params - 3"
 :valueof (inline '((foo a b)) (table 'foo (fn params (let (x y) params (list x y)))))
 :should be '((let (x y) (list a b) (list x y))))

(test "inline - handles quoted varargs params"
 :valueof (inline '((foo a b)) (table 'foo (fn 'params (let (x y) params (list x y)))))
 :should be '((let (x y) (list a b) (list x y))))

(test "inline - handles rest params"
 :valueof (inline '((foo 3 4)) (table 'foo (fn(a . b) (bar a b))))
 :should be '((bar 3 (list 4))))

(test "inline - handles destructured params"
 :valueof (inline '((foo (3 4) 5)) (table 'foo (fn((a b) . c) (bar a b c))))
 :should be '((bar 3 4 (list 5))))

(test "inline - handles quoted params"
 :valueof (inline '((foo 3)) (table 'foo (fn'(x) (+ x 1))))
 :should be '((+ 3 1)))

(test "inline - handles lexical bindings"
 :valueof (inline '((foo 3)) (table 'foo (let bar (fn(a) a) (fn(x) (bar x)))))
 :should be '(3))

(test "inline - handles lexical bindings"
 :valueof (inline '((foo 3)) (table 'foo (with (bar (fn(a) (baz a))
                                                baz (fn(a) a))
                                           (fn(x) (bar x)))))
 :should be '(3))

(test "inline - handles lexical bindings to compiled functions"
 :valueof (inline '((foo 3)) (table 'foo (with (bar (fn(a) (baz a))
                                                baz cons)
                                           (fn(x) (bar x)))))
 :should be '((baz 3)))

(test "inline - handles fn exprs"
 :valueof (inline '(((fn(a b) (+ a b)) 3 4)) (table))
 :should be '((+ 3 4)))

(test "inline - handles macros"
 :valueof (inline '((foo 3)) (table 'foo (with (bar (fn(a) (baz a))
                                                baz (fn(a) (eval a caller-scope)))
                                           (fn(x) (bar x)))))
 :should be '(3))

(test "inline - handles quotes"
 :valueof (inline '((foo 3)) (table 'foo (fn(a) (list 'a a))))
 :should be '((list 'a 3)))

(test "inline - handles bindings to macros"
 :valueof (inline '((foo 3)) (table 'foo (with (bar (fn(a) (baz a))
                                                baz do)
                                           (fn(x) (bar x)))))
 :should be '(3))

(test "inline - handles compound macro bodies"
 :valueof (inline '((foo 3)) (table 'foo (fn'(x)
                                           (prn "a")
                                           (eval `(+ ,x 1) caller-scope))))
 :should be '((prn "a") (+ 3 1)))

(test "inline - handles compound macro bodies - 2"
 :valueof (inline '((foo 3)) (table 'foo (fn'(x)
                                           (let y 4
                                             (eval `(+ ,x y) caller-scope)))))
 :should be '((let y 4 (+ 3 y))))

(test "inline - handles unquote of expr"
 :valueof (inline '((foo 3 4)) (table 'foo (fn 'body
                                             (eval `(list ,car.body) caller-scope))))
 :should be '((list 3)))

(test "inline - handles unquote-splice"
 :valueof (inline '((foo 3)) (table 'foo (fn 'body
                                           (eval `(list ,@body) caller-scope))))
 :should be '((list 3)))

(test "inline - handles unquote-splice of expr - 1"
 :valueof (inline '((foo 3 4)) (table 'foo (fn 'body
                                             (eval `(list ,@cdr.body) caller-scope))))
 :should be '((list 4)))

(test "inline - handles unquote-splice of expr - 2"
 :valueof (inline '((foo 3 4 5)) (table 'foo (fn 'body
                                               (eval `(list ,@cddr.body) caller-scope))))
 :should be '((list 5)))

(test "inline - inlines multi-branch if"
 :valueof (inline '((if 3 4)) (table 'if if))
 :should be `((,compiled-if 3 4 (if))))

(test "inline - inlines multi-branch if with free vars"
 :valueof (inline '((if a b)) (table 'if if))
 :should be `((,compiled-if a b (if))))
