prn.
(test "to-with-expr works"
 :valueof (to-with-expr '(foo 1 :a 2 (list 3 4) @(list 5 6) 7)
                        (table 'foo (let x 34
                                      (fn(a b (c d) e . f)
                                        (list a b c d e f)))))
 :should be '(with (x 34)
               (with ((a b (c d) e . f) (list 1 :a 2 (list 3 4) @(list 5 6) 7))
                 (list a b c d e f))))

(test "to-with-expr passes through unknown calls"
 :valueof (to-with-expr '(foo 1 2) (table))
 :should be '(foo 1 2))

(test "to-with-expr handles nested calls"
 :valueof (to-with-expr '(foo 1 2)
                        (table 'foo (fn(a b)
                                      (bar a b))
                               'bar (fn(c d)
                                      (baz c d))))
 :should be '(with ()
               (with ((a b) (list 1 2))
                 (with ()
                   (with ((c d) (list a b))
                     (baz c d))))))

(test "to-with-expr skips recursive calls"
 :valueof (to-with-expr '(foo 1 2)
                        (table 'foo (fn(a b)
                                      (foo a b))))
 :should be '(with ()
               (with ((a b) (list 1 2))
                 (foo a b))))

(test "to-with-expr skips selectively quoted params"
 :valueof (to-with-expr '(foo x y)
                        (table 'foo (fn('a 'b)
                                      `(+ ,a ,b))))
 :should be '(with ()
               ((fn('a 'b) `(+ ,a ,b)) x y)))

(test "to-with-expr handles macro calls"
 :valueof (to-with-expr '(foo x y)
                        (table 'foo (fn'(a b)
                                      (eval `(+ ,a ,b) caller-scope))))
 :should be '(with ()
               (with ((a b) '(x y))
                  (eval `(+ ,a ,b)))))

(test "to-with-expr leaves alone caller-scope outside macros"
 :valueof (to-with-expr '(foo 1 2)
                        (table 'foo (fn(a b)
                                      (eval a caller-scope))))
 :should be '(with ()
               (with ((a b) (list 1 2))
                 (eval a caller-scope))))

(test "to-with-expr handles functions in env"
 :valueof (to-with-expr '(foo x y)
                        (table 'foo (let bar (fn(a b) (+ a b))
                                      (fn(c d)
                                        (bar c d)))))
 :should be `(with (bar ,(fn(a b) (+ a b)))
               (with ((c d) (list x y))
                 (with ()
                   (with ((a b) (list c d))
                     (+ a b))))))

(test "inline-macro-eval works"
 :valueof (inline-macro-eval '(with ((a b) '(x y))
                                (eval `(+ ,a ,b))))
 :should be '(with ((a b) '(x y))
               (+ x y)))

(test "inline-macro-eval works with intermezzo code"
 :valueof (inline-macro-eval '(with ((a b) '(x y))
                                (prn a)
                                (eval `(+ ,a ,b))))
 :should be '(with ((a b) '(x y))
               (prn a)
               (+ x y)))

(test "scope->with-bindings and with-bindings->scope are converses"
 :valueof (with-bindings->scope (scope->with-bindings (table 'x 34)))
 :should be (table 'x 34))
