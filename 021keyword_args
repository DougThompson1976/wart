You can change the order of arguments to a function -- or make their meaning
more obvious -- by adding keywords. Keywords begin with a colon and are always
optional. Wart will first scan the keywords in a call, then bind the remaining
arguments in order. This will be familiar to python programmers:

  wart> (def foo(a b)
          (list a b))
  wart> (foo 1 3)
  (1 3)
  wart> (foo :b 1 3)
  (3 1)
  wart> (foo 1 :a 3)
  (3 1)
  wart> (foo :b 1 :a 3)
  (3 1)

Keywords that don't match function parameters are passed through as arguments:

  wart> (foo :c 1 2)
  (:c 1)                                # the third arg gets dropped

(Keyword symbols always evaluate to themselves.)

This is useful primarily because you can pass keywords through layers of
function calls:

  wart> (def A params (B @params))      # all params get spliced into a call to B
  wart> (def B(c ... d) (list c @d))    # d gets all but the first arg
  wart> (A 1 2 3)
  (1 2 3)
  wart> (A 1 2 :c 3)
  (3 1 2)

If you want to refer to a param using a different keyword, use param aliases:

  def test(msg pred|should expr|valueof expected)
    ..

Now test can refer to 'pred' and 'expr', but ':should' or ':valueof' may be
more readable in calls to it.
