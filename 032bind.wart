mac let(var val . body)
  `((fn(,var) ,@body) ,val)

def pair(l)
  (if
    !l
      nil
    !cdr.l
      (list:list car.l)
    :else
      (cons (list car.l cadr.l)
            (pair cddr.l)))

mac with(bindings . body)
  `((fn ,(map car pair.bindings)
     ,@body)
    ,@(map cadr pair.bindings))

mac withs(bindings . body)
  if !bindings
    `(do ,@body)
    `(let ,car.bindings ,cadr.bindings
       (withs ,cddr.bindings ,@body))



mac proc(name params . body)
  `(def ,name ,params
     ,@body
     nil)

mac ret(var val . body)
  `(let ,var ,val
     ,@body
     ,var)

mac rfn(name params . body)
  `(ret ,name nil
      (= ,name (fn ,params
                  ,@body)))

mac afn(params . body)
  `(rfn self ,params ,@body)
