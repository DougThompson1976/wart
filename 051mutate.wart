mac (zap! f x ... args)
  `(,x <- (,f ,x ,@args))

# infinite nil generator
<- nils '(nil)
<- cdr.nils nils

mac (wipe! ... places)
  `(<- ,@(+ @(zip places nils)))

mac (push! x seq)
  `(<- ,seq (cons ,x ,seq))

mac (pop! seq)
  `(do1 (car ,seq)
     (zap! cdr ,seq))

mac (shift! ... places)  # multiple-eval to maintain places
  `(<- ,@(+ @(zip places cdr.places)))

mac (rotate! ... places)
  `(let $tmp ,car.places
     (shift! ,@places $tmp))

mac (swap! x y)
  `(rotate! ,x ,y)

mac (making var val ... body)
  `(between (bind ,var ,val) :and (unbind ,var)
     ,@body)

mac (coerce! var type)
  `(zap! coerce ,var ,type)

def_assign rep (obj val)
  <- (car cddr.obj) val
