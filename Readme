Wart is a small, thoroughly unit-tested language with an emphasis on
readability and hackability. The primary goal is to be super easy to
understand and modify. Everything is extensible, and there is little that
can't be done as a library.

Here's factorial in wart:

  def (fact n)
    if (n = 0)
      1
      (n * (fact n-1))

Parens are used for function calls, not grouping; ((f)) is not the same as (f).

Here's another way to define factorial:

  def (fact n)
    (n * (fact n-1))

  def (fact n) :case (n = 0)
    1

All functions are generic and can be extended or overridden at any time. The
two definitions above could be in completely different files. The
implementation uniformly adds features to language primitives by extending
them in this manner. Related code stays together, and unrelated code in a
single function keeps from getting entangled together.

  def (len x) :case (isa x queue)
    (queue_length x)

Other features: full-strength lisp macros that can be similarly extended and
passed to other functions/macros without constraint, a cleaner syntax than
traditional lisp, and function calls that can always add keyword arguments for
readability.

  4-3
  => 1

  def (subtract a|from b)
    a-b

  subtract 4 3
  => 1
  subtract 3 :from 4
  => 1

You'll need linux and gcc.

To install it:
  $ git clone http://github.com/akkartik/wart.git
  $ cd wart
  $ ./wart
  ready! type in an expression, then hit enter twice. ctrl-d exits.

To run its tests:
  $ wart test
  $ # success

To learn more, read on: 000preface (http://github.com/akkartik/wart/blob/master/000preface)

I love feedback: wart@akkartik.com

--- Credits

Wart is an experiment in designing software. Inspirations:
  Christopher Alexander (http://www.amazon.com/Notes-Synthesis-Form-Harvard-Paperbacks/dp/0674627512)
  David Parnas (http://www.cs.umd.edu/class/spring2003/cmsc838p/Design/criteria.pdf)
  Peter Naur (http://alistair.cockburn.us/ASD+book+extract%3A+%22Naur,+Ehn,+Musashi%22)

As a language, wart was inspired by Arc, a dialect of lisp:
  http://www.paulgraham.com/arc.html
Discussions on the arc forum helped develop many of its features:
  "The wart atop the mountain": http://arclanguage.org/item?id=12814
  Generic functions: http://arclanguage.org/item?id=11779, http://arclanguage.org/item?id=13790
  Python-style keyword args: http://arclanguage.org/item?id=12657
  Why wart has no modules: http://arclanguage.org/item?id=12777
  Why wart has just one kind of equality: http://arclanguage.org/item?id=13690
  In praise of late binding: http://arclanguage.org/item?id=15655
  Libraries suck: http://www.arclanguage.org/item?id=13283
  Making macros even more first-class: http://arclanguage.org/item?id=16378
  Infix: http://arclanguage.org/item?id=16775

Wart is distributed under the Perl Foundation's artistic license 2.0:
  http://dev.perl.org/licenses/artistic.html
