  If I look at any small part of it, I can see what is going on -- I don't
  need to refer to other parts to understand what something is doing.

  If I look at any large part in overview, I can see what is going on -- I
  don't need to know all the details to get it.

  Every level of detail is as locally coherent and as well thought-out as any
  other level.

      -- Richard Gabriel, The Quality Without A Name
         (http://dreamsongs.com/Files/PatternsOfSoftware.pdf, page 42)

Wart is a small, *super* readable, thoroughly unit-tested lisp.
Wart returns to the roots of lisp: no constraints, maximum flexibility, extreme late-binding.
Wart is not a platform. It exposes no interface, releases no version numbers.
Anything can change at any time. If you use it, write lots of tests. Or God help you.
Everything is open to question -- but you'll have to pry macros out of my cold dead hands.

Wart is intended above all to be read.
If you write programs using it, put them in this directory. Don't hide wart away
somewhere in your path.
Feel free to make changes to the language. You know your needs best.

Wart will eventually be 'fast enough'. Right now it's 3-5 orders of magnitude too slow.
It will always be small. 10-20kLoC should provide a useable foundation for 'real' apps.

---

As a code sample, factorial in wart:

  def fact(n)
    if (iso n 0)                        ; iso is wart's comparison operator
      1
      (n * (fact n-1))

  ; Alternatively
  def fact(n)
    (n * (fact n-1))
  def fact(n) :case (iso n 0)
    1

All functions are generic and can be extended or overridden at any time. The
implementation uniformly adds features to language primitives by extending
them in this manner.

  def len(x) :case (isa x queue)
    (queue-length x)

Other features: full-strength lisp macros that can be similarly extended and
passed to other functions/macros (i.e. they're first-class); a cleaner syntax
than traditional lisp; pervasive python-style keyword arguments for
readability; unit tests and a build system for hackability.

You'll need linux and gcc.

To run it:
  $ git clone https://github.com/akkartik/wart.git
  $ cd wart
  $ ./wart
  wart>

Hit <enter> twice to eval.
Hit ctrl-d to quit.

To run tests:
  $ wart test
  $ # success

I love feedback: wart@akkartik.com

--- Credits

Wart was inspired by Arc, a lisp dialect by Paul Graham and Robert Morris:
  http://www.paulgraham.com/arc.html
It is distributed under the same license as Arc.

Discussions on the Arc Forum generated all the ideas here:
  http://arclanguage.org/forum

Story arc (pun intended):
  "The wart atop the mountain": http://arclanguage.org/item?id=12814
  Generic functions: http://arclanguage.org/item?id=11779, http://arclanguage.org/item?id=13790
  Python-style keyword args: http://arclanguage.org/item?id=12657
  Why wart has no modules: http://arclanguage.org/item?id=12777
  Why wart has just one kind of equality: http://arclanguage.org/item?id=13690
  In praise of late binding: http://arclanguage.org/item?id=15655
  Libraries suck: http://www.arclanguage.org/item?id=13283
  Making macros even more first-class: http://arclanguage.org/item?id=16378
  Infix: http://arclanguage.org/item?id=16775
