def sym?(_)
  (isa _ 'symbol)
def list?(_)
  (isa _ 'list)
def num?(_)
  (isa _ 'number)
def str?(_)
  (isa _ 'string)
def table?(_)
  (isa _ 'table)
def fn?(_)
  (isa _ 'function)
def mac?(_)
  (isa _ 'macro)
def callable?(_)
  (or fn?._ mac?._)
def compiled-fn?(_)
  (and (fn? _)
       (~cons? rep._!body))



def tag(type val)
  (list 'object type val)

def rep(x)
  if (or ~cons?.x (~iso 'object car.x))
    x
    car:cddr.x

def coerce(x dest-type)
  eval `(coerce-quoted ,x ,dest-type)
= coercions* (table)

mac defcoerce(src dest f)
  `(do
     if (~table_get coercions* ',dest)
       (table_set coercions* ',dest (table))
     (table_set (table_get coercions* ',dest) ',src ,f))

defcoerce nil list
  id

; arbitrary types in function position
mac defcall(type params . body)
  `(defcoerce ,type function
     (fn(,car.params)
       (fn ,cdr.params
         ,@body)))



mac as(type expr)
  `(coerce ,expr ',type)

defcoerce function macro
  id

defcoerce macro function
  id

def! compose(f g)
  mfn 'args
    `(,(as function f) (,(as function g) ,@args))

def sig(f)
  rep.f!sig

def! body(f)
  rep.f!body

def env(f)
  rep.f!env
