(test "iso works like equal by default"
  :valueof (iso nil nil)
  :should be t)

(wt-eval '(def iso(x y) :case (isa x 'footype)
            (and (position 3 rep.x)
                 (position 3 rep.y))))

(test "new case for iso takes"
  :valueof (annotate 'footype '(1 2 3))
  :should be (annotate 'footype '(3 4 5)))

(test "iso works by coercing empty tables"
  :valueof (table)
  :should be (table))

(test "iso works on tables"
  :valueof (obj 1 2 3 4)
  :should be (obj 3 4 1 2))

(test "iso works on characters"
  :valueof (iso #\a #\a)
  :should be t)

(test "iso works on characters - 2"
  :valueof (iso #\a #\b)
  :should be nil)

(test "iso works on non-characters"
  :valueof (iso #\tab #\tab)
  :should be t)

; integration test: obj + set + iso
(test "setting inside compound structures works"
  :valueof (ret aa (obj a '(1 2) b 3)
             (= aa!a.1 34))
  :should be (obj a '(1 34) b 3))
