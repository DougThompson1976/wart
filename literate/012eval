:(code)
// evaluate tree of cells as code
cell* eval(cell* expr) {
  new_trace_frame("eval");
  if (!expr) {
    RAISE << "eval: cell should never be NULL\n" << die();
    return nil;
  }

  trace("eval") << expr;
  if (expr == nil) {
    trace("eval") << "nil branch";
    trace("eval") << "=> nil";
    return nil;
  }

  if (is_keyword_sym(expr)) {
    trace("eval") << "keyword sym";
    trace("eval") << "=> " << expr;
    return expr;
  }

  if (is_sym(expr)) {
    trace("eval") << "sym";
    cell* result = lookup(expr);  // see lookup
    trace("eval") << "=> " << result;
    return result;
  }

  if (is_atom(expr)) {
    trace("eval") << "literal";
    trace("eval") << "=> " << expr;
    return expr;
  }

  if (is_quoted(expr)) {
    trace("eval") << "quote";
    trace("eval") << "=> " << right(expr);
    return right(expr);
  }

  cell* result = eval_primitive(left(expr), right(expr));
  if (result) {
    trace("eval") << "compiled fn";
    trace("eval") << "=> " << result;
    return result;
  }

  // expr is a call
  cell* fn = eval(left(expr));
  if (!is_fn(fn))
    RAISE << "Not a call: " << expr << '\n'
        << "Perhaps you need to split the line in two.\n";

  // eval its args, create new bindings
  eval_bind_all(sig(fn), right(expr));

  // eval all forms in body, save result of final form
  for (cell* form = body(fn); form != nil; form=right(form))
    result = eval(left(form));
  trace("eval") << "=> " << result;
  return result;
}

:(scenarios run)

:(scenario eval_nil)
()
+eval: nil branch
+eval: => nil

:(scenario eval_num)
34
+eval: literal
+eval: => 34

:(scenario eval_keyword)
:abc
+eval: keyword sym
+eval: => :abc

:(scenario eval_string)
"ac bd"
+eval: literal
+eval: => "ac bd"

:(scenario eval_sym)
(<- a 34)
===
a
+eval: sym
+eval: => 34

:(scenario eval_quoted_atoms)
'a
'34
+eval: 'a
+eval: quote
+eval: => a
+cell: num 34
+eval: '34
+eval: quote
+eval: => 34

:(scenario eval_quoted_lists)
'(a b)
+eval: quote
+eval: => (a b)

:(scenario eval_fn_call)
((fn () 34))
+eval/1: => 34

:(scenario eval_fn_call2)
(<- x 34)
===
((fn () x))
+eval/1: => 34

:(scenario eval_fn_multiple_body_exprs)
((fn () 1 2))
+eval/1: => 2
-eval/1: => 1

:(code)
cell* eval_primitive(cell* f, cell* args) {
  if (f == new_sym("fn")) {
    return new_cell(f, args);
  }

  if (f == new_sym("eval")) {
    cell* arg = eval(left(args));
    return eval(arg);
  }

  if (f == new_sym("if")) {
    cell* check = eval(left(args));
    return (check != nil) ? eval(left(right(args))) : eval(left(right(right(args))));
  }

  if (f == new_sym("not")) {
    cell* arg = eval(left(args));
    return (arg == nil) ? new_num(1) : nil;
  }

  if (f == new_sym("=")) {
    cell* x = eval(left(args));
    cell* y = eval(left(right(args)));
    if (x == nil && y == nil)
      return new_num(1);
    else if (x == nil || y == nil)
      return nil;
    else if (x == y)
      return x;
    else if (is_string(x) && is_string(y) && to_string(x) == to_string(y))
      return x;
    else
      return nil;
  }

  if (f == new_sym("<-")) {
    cell* var = left(args);
    if (!is_sym(var)) {
      RAISE << "can't assign to non-sym " << var << '\n';
      return nil;
    }
    cell* val = eval(left(right(args)));
    new_binding(var, val);
    return val;
  }

  // lists
  if (f == new_sym("cons")) {
    return new_cell(eval(left(args)), eval(left(right(args))));
  }
  if (f == new_sym("car")) {
    cell* arg = eval(left(args));
    return left(arg);
  }
  if (f == new_sym("cdr")) {
    cell* arg = eval(left(args));
    return right(arg);
  }

  // numbers
  if (f == new_sym("+")) {
    cell* x = eval(left(args));
    cell* y = eval(left(right(args)));
    return new_num(to_int(x) + to_int(y));
  }
  if (f == new_sym("-")) {
    cell* x = eval(left(args));
    cell* y = eval(left(right(args)));
    return new_num(to_int(x) - to_int(y));
  }
  if (f == new_sym("*")) {
    cell* x = eval(left(args));
    cell* y = eval(left(right(args)));
    return new_num(to_int(x) * to_int(y));
  }
  if (f == new_sym("<")) {
    cell* x = eval(left(args));
    cell* y = eval(left(right(args)));
    return (to_int(x) < to_int(y)) ? new_num(1) : nil;
  }
  return NULL;
}

void test_fn_works() {
  cell* result = run("(fn(x) x)");
  // {sig: (x), body: (x)}
  cell* sig = left(right(result));
  CHECK_EQ(left(sig), new_sym("x"));
  CHECK_EQ(right(sig), nil);
  cell* body = right(right(result));
  CHECK_EQ(left(body), new_sym("x"));
  CHECK_EQ(right(body), nil);
}

:(scenario if_sees_args_in_then_and_else)
(<- f (fn(x) (if 34 x)))
===
(f 35)
+eval/1: => 35

:(scenario not)
(not 35)
+eval: compiled fn
+eval/1: => nil

:(scenario not2)
(not nil)
+eval: compiled fn
+eval/1: => 1

:(scenario cons)
(cons 1 2)
+eval: compiled fn
+eval/1: => (1 ... 2)

:(scenario car)
(car '(1 2))
+eval/1: => 1

:(scenario cdr)
(cdr '(1 2))
+eval/1: => (2)

:(scenario assign_var)
(<- x 3)
===
x
+eval/1: => 3

:(scenario assign_overrides_vars)
(<- x 3)
(<- x 5)
===
x
+eval/1: => 5

:(scenario eval)
(<- x 'y)
(<- y 23)
===
(eval x)
+eval/2: => y
+eval/1: => 23

:(code)
void test_assign_to_non_sym_warns() {
  Hide_warnings = true;
  run("(<- 3 nil)");
  CHECK_EQ(trace_count("warn"), 1);
}

:(scenario equal)
(= 23 23)
+eval/1: => 23

:(scenario equal2)
(= 2 3)
+eval/1: => nil

:(scenario equal_handles_nil)
(= nil nil)
-eval/1: => nil

:(scenario add)
(+ 1 2)
+eval/1: compiled fn
+eval/1: => 3

:(scenario subtract)
(- 1 2)
+eval/1: => -1

:(scenario multiply)
(* 3 4)
+eval/1: => 12

:(scenario comparison)
(< 3 4)
-eval/1: => nil

:(scenario comparison2)
(< 4 3)
+eval/1: => nil

:(code)  //// fn params
// bind params to args in new_scope, taking into account:
//  quoted params (eval'ing args as necessary; args is never quoted, though)
//  destructured params
void eval_bind_all(cell* params, cell* args) {
  if (params == nil)
    ;

  else if (is_sym(params))
    bind_params(params, eval_all(args));

  else if (!is_cell(params))
    ;

  else {
    bind_params(left(params), eval(left(args)));
    eval_bind_all(right(params), right(args));
  }
}

void bind_params(cell* params, cell* args) {
  if (params == nil)
    ;

  else if (is_sym(params))
    new_binding(params, args);

  else if (!is_cell(params))
    ;

  else if (args != nil && !is_cell(args))
    bind_params(params, nil);

  else {
    bind_params(left(params), left(args));
    bind_params(right(params), right(args));
  }
}

cell* eval_all(cell* args) {
  if (!is_cell(args))
    return eval(args);
  cell* p_result = new_cell(), *curr = p_result;
  for (; args != nil; args=right(args), curr=right(curr))
    add_cell(curr, eval(left(args)));
  return right(p_result);
}

:(scenario eval_handles_param)
(<- x 3)
===
((fn (a)) x)
+bind: a: 3

:(scenario eval_evals_arg)
(<- f (fn (x)
        (x)))
===
(f (fn ()
     34))
+eval/1: => 34

:(scenario eval_handles_multiple_params)
((fn (a b) b) 1 2)
+bind: a: 1
+bind: b: 2
+eval/1: => 2

:(scenario eval_binds_missing_param)
((fn (a b) b) 1)
+bind: a: 1
+bind: b: nil
+eval/1: => nil

:(scenario eval_handles_vararg_param)   // named param list
((fn args) 1 2)
+bind: args: (1 2)

:(scenario eval_evals_vararg_args)
(<- x 3)
(<- y 4)
===
((fn args) x y)
+eval: x
+eval: sym
+eval: => 3
+eval: y
+eval: sym
+eval: => 4
+bind: args: (3 4)

:(scenario eval_handles_rest_param)
((fn (a b ... c) c) 1 2 3 4 5)
+eval/1: => (3 4 5)

:(scenario eval_evals_rest_args)
(<- x 3)
(<- y 4)
===
((fn (a ... b)) x y)
+bind: a: 3
+bind: b: (4)

:(scenario eval_handles_destructured_params)
((fn ((a b)) b) '(1 2))
+bind: a: 1
+bind: b: 2
+eval: => 2

:(scenario eval_evals_destructured_args)
(<- x 3)
(<- y 4)
===
((fn ((a b)) b) (cons x (cons y)))
+bind: a: 3
+bind: b: 4

:(code)   //// internals
bool is_quoted(cell* cell) {
  return is_cell(cell) && left(cell) == new_sym("'");
}

cell* strip_quote(cell* cell) {
  return is_quoted(cell) ? right(cell) : cell;
}

bool is_keyword_sym(cell* x) {
  if (!is_sym(x)) return false;
  string name = to_string(x);
  if (name == ":") return false;
  return name[0] == ':';
}

// fn = (sig ... body)
bool is_fn(cell* x) {
  return is_cell(x) && left(x) == new_sym("fn");
}

cell* sig(cell* fn) {
  return left(right(fn));
}

cell* body(cell* fn) {
  return right(right(fn));
}

cell* quote(cell* x) {
  return new_cell(new_sym("'"), x);
}

cell* quote_all(cell* x) {
  cell* result = new_cell(), *curr = result;
  for (cell* iter = x; iter != nil; iter=right(iter), curr=right(curr))
    add_cell(curr, quote(left(iter)));
  return right(result);
}
