// Lists are trees when 'sighted along' the right child.

cell* first(cell* x) {
  return left(x);
}

cell* rest(cell* x) {
  return right(x);
}

cell* new_cell(cell* left, cell* right) {
  cell* ans = new_cell();
  set_left(ans, left);
  set_right(ans, right);
  return ans;
}

cell* new_cell(cell* left) {
  return new_cell(left, nil);
}

bool is_tree(cell* x) {  // tree or list
  return x != nil && x->type == TREE;
}

bool is_atom(cell* x) {
  return !is_tree(x);
}
