void setup_cells() {
  setup_nil();
  Int_literals.clear();
  Sym_literals.clear();
  reset_heap(First_heap);
}

token next_token(list<token>& in) {
  token result = in.front(); in.pop_front();
  return result;
}

bool is_list(const ast_node& n) {
  return !n.elems.empty();
}

bool is_atom(const ast_node& n) {
  return n.elems.empty();
}

bool is_quote_or_unquote(const ast_node& n) {
  return is_atom(n) && is_quote_or_unquote(n.atom);
}

bool is_open_paren(const ast_node& n) {
  return n == "(";
}
bool is_close_paren(const ast_node& n) {
  return n == ")";
}

ostream& operator<<(ostream& os, ast_node x) {
  if (x.elems.empty()) return os << x.atom;
  bool skip_next_space = true;
  for (list<ast_node>::iterator p = x.elems.begin(); p != x.elems.end(); ++p) {
    if (!is_close_paren(*p) && !skip_next_space)
      os << " ";
    os << *p;
    skip_next_space = (is_open_paren(*p) || is_quote_or_unquote(*p));
  }
  return os;
}

// we might be at eof and just not know it if we haven't looked around yet
bool eof(istream& in) {
  in.peek();
  return in.eof();
}
