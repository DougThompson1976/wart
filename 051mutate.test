(test "zap! works"
  :valueof (ret x list.1
             (zap! car x))
  :should be 1)

(test "zap! handles more args"
  :valueof (ret x 3
             (zap! cons x 1))
  :should be '(3 ... 1))

(test "zap! handles more args"
  :valueof (ret x 3
             (zap! (+) x 1))
  :should be 4)

(test "zap! works with _"
  :valueof (ret x 3
             (zap! _+1 x))
  :should be 4)

(test "shift! works"
  :valueof (with (x 3 y 4)
             (shift! x y 27)
             (list x y))
  :should be '(4 27))

(test "rotate! works"
  :valueof (with (x 3 y 4 z 5)
             (rotate! x y z)
             (list x y z))
  :should be '(4 5 3))

(test "swap! works"
  :valueof (with (x 3 y 4)
             (swap! x y)
             (list x y))
  :should be '(4 3))

(test "making works"
  :valueof (do
             (x <- 3)
             (let f (fn() x)
               (list (f)
                     (let x 4 (f))
                     (making x 4 (f)))))
  :should be '(3 3 4))
