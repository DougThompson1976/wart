(test "len works on strings"
 :valueof (len "abcdefgh")
 :should be 8)

(test "strings work in function position"
 :valueof ("abcd" 2)
 :should be "c")

(test "strings can index final char"
 :valueof ("abcd" 3)
 :should be "d")

(test "strings can take negative indices"
 :valueof ("abcd" -3)
 :should be "b")

(test "strings can take slices"
 :valueof ("abcd" 1 3)
 :should be "bc")

(test "strings can take slices - 2"
 :valueof ("abcd" 1 -1)
 :should be "bc")

(test "strings can take slices - explicit nil"
 :valueof ("abcd" 1 nil)
 :should be "bcd")

(test "string indices can be assigned to"
 :valueof (ret s "abc"
            (= s.1 "z"))
 :should be "azc")

(test "string indices can be assigned to - 2"
 :valueof (ret s "abc"
            (= s.-1 "z"))
 :should be "abz")

(test "string slices can be assigned to"
 :valueof (ret s "abcdefgh"
            (= (s 1 5) "xy"))
 :should be "axyfgh")

(test "string slices can be assigned to - 2"
 :valueof (ret s "abcdefgh"
            (= (s -4 -1) "xy"))
 :should be "abcdxyh")

(test "string slices can be assigned to - explicit nil"
 :valueof (ret s "abcdefgh"
            (= (s -4 nil) "xy"))
 :should be "abcdxy")

(test "string slices can be assigned to - explicit nil var"
 :valueof (ret s "abcdefgh"
            (let x nil
              (= (s -4 x) "xy")))
 :should be "abcdxy")

(test "string index can be reset"
 :valueof (ret l "abc"
            (= l.1 nil))
 :should be "ac")

(test "each works on literal strings"
 :valueof (ret ans nil
            (each c "abc"
              (push c ans)))
 :should be '("c" "b" "a"))

(test "each works on strings"
 :valueof (ret ans nil
            (let s "abc"
              (each c s
                (push c ans))))
 :should be '("c" "b" "a"))

(test "str works with multiple args"
 :valueof (str 'a 43)
 :should be "a43")
