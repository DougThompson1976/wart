; Macros: quote spliced args

with (a 3 b 4)
  prn ((fn'(x y) (eval `(cons ,x ,y) caller-scope)) a b)

with (a 3 b '(1 2))
  prn ((fn'(x y) (eval `(cons ,x ,y) caller-scope)) a b)

let x '(3 (1 2))
  prn (cons (unwrap (fn'(x y) (eval `(cons ,x ,y) caller-scope)))
            (map (fn(_) (cons quote _)) x))
  prn (eval:cons (unwrap (fn'(x y) (eval `(cons ,x ,y) caller-scope)))
                 (map (fn(_) (cons quote _)) x))

with (a 3 x '((1 2)))
  prn (cons (unwrap (fn'(x y) (eval `(cons ,x ,y) caller-scope)))
            (cons a
                  (map (fn(_) (cons quote _)) x)))
  prn (eval:cons (unwrap (fn'(x y) (eval `(cons ,x ,y) caller-scope)))
                 (cons a
                       (map (fn(_) (cons quote _)) x)))

;? let x '(3 (1 2))
;?   prn ((fn'(x y) (eval `(cons ,x ,y) caller-scope)) @x)

; Functions: unwrap

prn!===========
with (a 3 b 4)
  prn ((fn(x y) (cons x y)) a b)

let x '(3 (1 2))
  prn (cons (unwrap (fn(x y) (cons x y)))
            (map (fn(_) (cons quote _)) x))
  prn (eval:cons (unwrap (fn(x y) (cons x y)))
                 (map (fn(_) (cons quote _)) x))

let x '(3 (1 2))
  prn (eval:cons (unwrap (fn(x y) (cons x y)))
                 x)

quit.
