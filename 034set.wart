(mac wart-set places
  `(do ,@(map0 (fn(x) `(= ,x t))
               places)))
(defover set wart-set)

(mac wipe places
  `(do ,@(map0 (fn(x) `(= ,x nil))
               places)))

(macro-alias rotate rotatef)

(mac swap(place1 place2)
  `(rotate ,place1 ,place2))

(mac zap(f place . args)
  `(= ,place (,f ,place ,@args)))

(mac collect body
  `(with (,$acc nil
          ,$old-yield (symbol-function 'yield))
     (= (symbol-function 'yield) [push _ ,$acc])
     (do ,@body)
     (= (symbol-function 'yield) ,$old-yield)
     (rev ,$acc)))
(def yield(_) 'yield-outside-collect)

(mac or=(place expr)
  `(= ,place (or ,place ,expr)))

; assignments to complex things; don't try to print at the repl
(mac newdef body
  `(do1 nil (= ,@body)))
