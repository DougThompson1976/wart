(test "pairp works"
  :valueof (pairp '(1 2))
  :should satisfy true_value)

(test "tuples works"
  :valueof (tuples 3 '(1 2 3 4 5 6))
  :should be '((1 2 3) (4 5 6)))

(test "tuples works with unbalanced lists"
  :valueof (tuples 3 '(1 2 3 4 5))
  :should be '((1 2 3) (4 5)))

(test "tuples works with n 1"
  :valueof (tuples 1 '(1 2 3 4 5))
  :should be (map 'list #'list '(1 2 3 4 5)))

(test "match"
  :valueof (match 3 3)
  :should be t)

(test "match"
  :valueof (match 3 4)
  :should be nil)

(test "match"
  :valueof (match '(1 (2 3)) '(1 (2 3)))
  :should be t)

(test "match"
  :valueof (match '(2 (2 3)) '(1 (2 3)))
  :should be nil)

(test "match"
  :valueof (match 3 '_)
  :should be t)

(test "match"
  :valueof (match '(1 (2 3)) '(1 (_ 3)))
  :should be t)

(test "match"
  :valueof (match '(2 (2 3)) '(1 (_ 3)))
  :should be nil)

(test "fa picks first available"
  :valueof (fa 3 4)
  :should be 3)

(test "fa falls through first arg"
  :valueof (fa (values nil 34) 4)
  :should be 4)

(test "fa falls through unavailable args"
  :valueof (fa (values nil 34) (values nil 'not-found) (values 4 nil))
  :should be 4)

(test "fa doesn't over-evaluate"
  :valueof (let ((counter 0))
             (fa (progn (incf counter)
                        (values 0 'not-found))
                 (progn (incf counter)
                        34)
                 (progn (incf counter)
                        27))
             counter)
  :should be 2)

(test "la returns nil without args"
  :valueof (la)
  :should be nil)

(test "la returns single arg"
  :valueof (la 34)
  :should be 34)

(test "la returns single arg - 2"
  :valueof (la (values 34 'no-arg))
  :should be 34)

(test "la falls through available args"
  :valueof (la (values 3 'available) (values 4 'available))
  :should be 4)

(test "la falls through available args - 2"
  :valueof (multiple-value-list (la (values 34 'available) (values 16 'available) 27))
  :should be (list 16 'available))

(test "la binds it"
  :valueof (la (values 34 'available) (values (+ it 1) t))
  :should be 35)

(test "la evals one past the last-available value, no more"
  :valueof (let ((counter 0))
             (la (progn (incf counter)
                        (values 34 'available))
                 (progn (incf counter)
                        34)
                 (progn (incf counter)
                        35)
                 (progn (incf counter)
                        36)
                 (progn (incf counter)
                        (values 678 t)))
             counter)
  :should be 2)

(test "indexing expands correctly"
  :valueof (macex1 '(indexing foo-table (x y z)
                      (+ it 1)))
  :should be '(la (guarded-gethash x foo-table)
                  (guarded-gethash y it)
                  (guarded-gethash z it)
                  (values it 'never-returned)
                  (values (+ it 1) t)))

(test "indexing expands correctly - 2"
  :valueof (macex1 '(indexing foo-table (x)
                      (+ it 1)))
  :should be '(la (guarded-gethash x foo-table)
                  (values it 'never-returned)
                  (values (+ it 1) t)))

(test "indexing works"
  :valueof (let ((x (table)))
             (setf (gethash 0 x) (table))
             (setf (gethash 1 (gethash 0 x)) (table))
             (setf (gethash 2 (gethash 1 (gethash 0 x))) 34)
             (indexing x (0 1 2)
               (* it 2)))
  :should be 68)

(test "indexing sets second value on bailing"
  :valueof (multiple-value-list
             (let ((x (table)))
               (setf (gethash 0 x) (table))
               (setf (gethash 1 (gethash 0 x)) (table))
               (setf (gethash 2 (gethash 1 (gethash 0 x))) 34)
               (indexing x (0 1 3)
                 (* it 2))))
  :should match '(_ t))

(test "indexing sets second value on bailing - 2"
  :valueof (multiple-value-list
             (let ((x (table)))
               (setf (gethash 0 x) (table))
               (setf (gethash 1 (gethash 0 x)) (table))
               (setf (gethash 2 (gethash 1 (gethash 0 x))) 34)
               (indexing x (911)
                 (* it 2))))
  :should match '(_ t))

(test "indexing handles missing tables"
  :valueof (multiple-value-list
             (let ((x nil))
               (indexing x (911)
                 (* it 2))))
  :should match '(_ t))

(test "indexing handles missing tables - 2"
  :valueof (multiple-value-list
             (let ((x (table)))
               (indexing x (911 2)
                 (* it 2))))
  :should match '(_ t))
