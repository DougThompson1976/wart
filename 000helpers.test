(test-wart "pairp works"
  :valueof (pairp '(1 2))
  :should satisfy true_value)

(test-wart "call works on simple functions"
  :valueof (call #'car '(1))
  :should be 1)

(test-wart "call works on simple functions"
  :valueof (call #'car '(1))
  :should be 1)

(test-wart "call coerces to function when necessary"
  :valueof (call 'car '(1))
  :should be 1)

(test-wart "call works on lambdas"
  :valueof (call [+ _ 1] 3)
  :should be 4)

(test "match"
  :valueof (match 3 3)
  :should be t)

(test "match"
  :valueof (match 3 4)
  :should be nil)

(test "match"
  :valueof (match '(1 (2 3)) '(1 (2 3)))
  :should be t)

(test "match"
  :valueof (match '(2 (2 3)) '(1 (2 3)))
  :should be nil)

(test "match"
  :valueof (match 3 '_)
  :should be t)

(test "match"
  :valueof (match '(1 (2 3)) '(1 (_ 3)))
  :should be t)

(test "match"
  :valueof (match '(2 (2 3)) '(1 (_ 3)))
  :should be nil)

(test "fa picks first available"
  :valueof (fa 3 4)
  :should be 3)

(test "fa falls through first arg"
  :valueof (fa (values nil 34) 4)
  :should be 4)

(test "fa falls through unavailable args"
  :valueof (fa (values nil 34) (values nil 'not-found) (values 4 nil))
  :should be 4)

(test "la returns nil without args"
  :valueof (la)
  :should be nil)

(test "la returns single arg"
  :valueof (la 34)
  :should be 34)

(test "la returns single arg - 2"
  :valueof (la (values 34 'no-arg))
  :should be 34)

(test "la falls through available args"
  :valueof (la (values 3 'available) (values 4 'available))
  :should be 4)

(test "la falls through available args - 2"
  :valueof (multiple-value-list (la (values 34 'available) (values 16 'available) 27))
  :should be (list 16 'available))

(test "la binds it"
  :valueof (la (values 34 'available) (values (+ it 1) t))
  :should be 35)
