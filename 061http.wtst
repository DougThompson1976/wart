(setf http-get-request
"Host: localhost:8080
Connection: keep-alive
Cache-Control: max-age=0
Accept: application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_8; en-US) AppleWebKit/534.13 (KHTML, like Gecko) Chrome/9.0.597.84 Safari/534.13
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-US,en;q=0.8
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3
Cookie: abc=def;foo=bar")

(test-wart "parse-http-headers works"
  :valueof (fromstring http-get-request (parse-http-headers))
  :should be 
     '(("host" . "localhost:8080")
       ("connection" . "keep-alive")
       ("cache-control" . "max-age=0")
       ("accept" .
            "application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5")
       ("user-agent" .
            "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_8; en-US) AppleWebKit/534.13 (KHTML, like Gecko) Chrome/9.0.597.84 Safari/534.13")
       ("accept-encoding" . "gzip,deflate,sdch")
       ("accept-language" . "en-US,en;q=0.8")
       ("accept-charset" . "ISO-8859-1,utf-8;q=0.7,*;q=0.3")
       ("cookie" . "abc=def;foo=bar")))

(test-wart "parse-http-cookies works"
  :valueof (parse-http-cookies (fromstring http-get-request
                                 (parse-http-headers)))
  :should be '(("abc" . "def") ("foo" . "bar")))

(test-wart "parse-http-args works"
  :valueof (parse-http-args "foo=bar&baz=42")
  :should be '(("foo" . "bar") ("baz" . "42")))

(test-wart "parse-http-args urldecodes"
  :valueof (parse-http-args "foo=a+b+c&bar=%2034")
  :should be '(("foo" . "a b c") ("bar" . " 34")))

(test-wart "read-body works"
  :valueof (fromstring http-get-request (read-body '(("content-length" . "20"))))
  :should be "Host: localhost:8080")

(test-wart "parse-url works"
  :valueof (parse-url "www.google.com")
  :should be (wt-eval '(obj protocol "http" host "www.google.com" port 80 path "/")))

(test-wart "parse-url works - 2"
  :valueof (parse-url "www.google.com:8080")
  :should be (wt-eval '(obj protocol "http" host "www.google.com" port 8080 path "/")))

(test-wart "parse-url works - 3"
  :valueof (parse-url "ftp://www.google.com/blah")
  :should be (wt-eval '(obj protocol "ftp" host "www.google.com" port 80 path "/blah")))

(test-wart "http-get works"
  :valueof (let port (+ 1024 rand.80)
             ; server
             (w/server-socket s port
               (fork (accepting stream :from s
                       (w/stdout stream
                         (prrn "HTTP/1.1 " http-ok+)
                         (pr-headers http-headers*)
                         (prn "Hello world!")))))
             ; client
             (skipping sb-bsd-sockets:socket-error
               (call (http-get (join "127.0.0.1:" port "/foo"))
                     'body)))
  :should be "Hello world!")

(test-wart "http-get performs dns lookup"
  :valueof (call (http-get "www.google.com") 'body)
  :should satisfy true_value)

(test-wart "http-get works with servers that send just \\n, not \\r\\n"
  :valueof (let port (+ 1024 rand.80)
             ; server
             (w/server-socket s port
               (fork (accepting stream :from s
                       (w/stdout stream
                         (prn "HTTP/1.1 " http-ok+)
                         (each (n v) http-headers*
                           (prn n ": " v))
                         (prn)
                         (prn "Hello world!")))))
             ; client
             (skipping sb-bsd-sockets:socket-error
               (call (http-get (join "127.0.0.1:" port "/foo"))
                     'body)))
  :should be "Hello world!")
