;; Primitives for binding variables

(mac wc-map(f . seqs)
  `(map 'list ,f ,@seqs)) ; recursive map won't be transformed
(special-form map wc-map)

(mac with(parms . body)
  `(call (fn ,(map #'car (pair parms))
           ,@body)
         ,@(map #'cadr (pair parms))))

(mac wc-let(var val . body)
  `(with (,var ,val) ,@body))
(special-form let wc-let)

(mac ret(var val . body)
  `(let ,var ,val ,@body ,var))

(mac withs(parms . body)
  (if (no parms)
      `(do ,@body)
      `(let ,(car parms) ,(cadr parms)
         (withs ,(cddr parms) ,@body))))

(def pair(xs ? f #'list)
  (if (no xs)
       nil
      (no (cdr xs))
       (list (list (car xs)))
      (cons (call f (car xs) (cadr xs))
            (pair (cddr xs) f))))
