let $mac mac
  mac! (mac (name ... params) ... body)
    if (car.body ~= :case)
      `(,$mac (,name ,@params) ,@body)
      `(let $super ,name
         (mac! (,name ... ($params | ,params))
           (if ,cadr.body
             (do ,@cddr.body)
             (cons $super $params))))

mac (def (name ... params) ... body) :case (car.body = :case)
  `(let $old ,name
     (def! (,name ... ($params | ,params))
       (if ,cadr.body
         (do ,@cddr.body)
         ($old @$params))))



## def with selectively quoted params
# We could just always use this, but it's faster to avoid the extra eval if
# possible.

quote <- (car ''1)

def (mem? atom tree)
  if (= atom tree)
       1
     cons?.tree
       (or (mem? atom car.tree)
           (mem? atom cdr.tree))

mac (def (name ... params) ... body) :case (and (car.body = :case)
                                                (mem? quote params))
  `(let $old ,name
     # keep $params uneval'd in case any params are quoted
     (def! (,name ... ('$params | ,params))
       (let $caller_scope caller_scope
         (if ,cadr.body
           (do ,@cddr.body)
           (eval `(,$old ,@$params) $caller_scope)))))



## rudimentary pattern matching for symbol constants

<- backquote (car '`(1))
alias backquote? predicate.backquote
alias backquoted? (cons? & backquote?+car)

mac (def (name ... params) ... body) :case (mem? backquote params)
  `(def (,name ,@unqq.params) :case (and ,@(map (fn(_)
                                                  `(,_ = ',_))
                                                backquoted.params))
     ,@body)

mac (mac (name ... params) ... body) :case (mem? backquote params)
  `(mac (,name ,@unqq.params) :case (and ,@(map (fn(_)
                                                  `(,_ = ',_))
                                                backquoted.params))
     ,@body)

def (backquoted tree)
  if backquoted?.tree
       (list cdr.tree)
     cons?.tree
       (join backquoted+car.tree
             backquoted+cdr.tree)

def (unqq tree)
  if backquoted?.tree
       (cons quote cdr.tree)
     ~cons?.tree
       tree
     :else
       (cons unqq+car.tree
             unqq+cdr.tree)
