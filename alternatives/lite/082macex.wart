proc (petrify)
  log "Petrifying macros for performance (takes ~2 minutes)"
  (update_macroexpansions)
  (update_optimized_bodies)
  log "done."

def (update_macroexpansions)
  log "  computing expansions"
  each (var val) (sort (< car) (as list (globals)))
    (update_macroexpansion val)

def (update_macroexpansion val)
  when (mac? val)
    (<- (rep.val 'expander)
        (ret m copy.val
          (zap! strip_eval body.m)))

def (update_optimized_bodies)
  log "  expanding calls"
  each (var val) (sort (< car) (as list (globals)))
    (update_optimized_body var val)

def (update_optimized_body var val)
  when (and fn?.val ~compiledfn?.val
                    ~mac?.val)
    (<- (rep.val 'optimized_body)
        (map macex body.val))
    (rep.val 'optimized_body)

def (macex call env)
  let outer (macex1 call env)
    backstopped_by outer
      when list?.outer
        let (f ... args) outer
          when (isa 'symbol f)
            whenlet fval (hiding_warnings (eval f env))  # todo: side-effects
              when ~quoted?+sig.fval
                if (or ~cons?+sig.fval
                       (all param_will_be_evald? sig.fval))
                     : `(,f ,@(map (fn(_) (macex _ env)) args))
                   (some keyword? args)
                     # todo
                     : nil
                   :else
                     : collect yield.f
                         each (param arg) (zip sig.fval args)
                           if (param_will_be_evald? param)
                             yield (macex arg env)
                             yield arg

def (param_will_be_evald? param)
  (and ~quoted?.param
       (or ~list?.param
           ~aliased?.param
           (some ~quoted? cdr.param)))

def (aliased? param)
  (and list?.param
       (car.param = '|))

def (macex1 call env)
  backstopped_by call
    when (list? call)
      let (m ... args) call
        when (bound? m env)
          let mval (eval m env)
            unless (rep.mval 'expander)
              update_macroexpansion mval
            when (mac? mval)
              ((rep.mval 'expander) @args)

def (strip_eval exprs)
  transform exprs :thru
    _.0  # macro body always has just one expr
      _.1  # strip away (eval .. caller_scope)
    list # re-enclose in body

(petrify)
