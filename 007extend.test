(defun fooextend(x) (+ x 5))
(extend fooextend(x) :if (evenp x)
  (+ x 1))
(test "extend works"
  :valueof (list (fooextend 3) (fooextend 2))
  :should be (list 8 3))

(defmacro fooextmac(x) `(+ ,x 5))
(extend-macro fooextmac(x) :if (evenp x)
  `(+ ,x 1))
(test "extend-macro works"
  :valueof (list (fooextmac 3) (fooextmac 2))
  :should be (list 8 3))

(defmacro foomacro1(x) `(+ ,x 5))
(defmacro foomacro2(x) `(foomacro1 ,x))
(extend-macro foomacro2(x) :if (evenp x)
   `(+ ,x 1))
(test "extend-macro works inside nested macros"
  :valueof (list (foomacro2 3) (foomacro2 2))
  :should be (list 8 3))

(defmacro foomacro3(&rest args) 6453)
(extend-macro foomacro3(&rest args) :if (no args)
  5739)
(test "extend-macro can handle lambda keywords"
  :value-of (foomacro3 3 4 5)
  :should be 6453)

(defmacro foomacro4(n)
  `(incf ,n))
(extend-macro foomacro4(n) :if (no n)
  42)
(setf fooplace 34)
(test "extend-macro works on bodies calling other macros"
  :valueof (foomacro4 fooplace)
  :should be 35)
