(wt-eval '(defgeneric genericfoo(x) x))
(test "defgeneric works"
  :valueof (genericfoo 3)
  :should be 3)

(test "defgeneric handles #$%# bit type"
  :valueof (genericfoo 1)
  :should be 1)

(test "defgeneric works on strings"
  :valueof (genericfoo "abc")
  :should be "abc")

(wt-eval '(defmethod genericfoo(x) integer
            (1+ x)))
(test "defmethod works"
  :valueof (genericfoo 3)
  :should be 4)

(wt-eval '(defmethod genericfoo(x) string
            ))
(test "defmethod can reset vtable"
  :valueof (genericfoo "abc")
  :should be '(#\a #\b #\c))

(wt-eval '(deftransform genericfoo2(x) (cons #\0 x)))
(test "deftransform works"
  :valueof (genericfoo2 '(1 2))
  :should be '(#\0 1 2))
(test "deftransform works on strings"
  :valueof (genericfoo2 "abc")
  :should be '(#\0 . "abc"))
(wt-eval '(defmethod genericfoo2(x) string (concatenate 'string "0" x)))
(test "strings may need a specialcase"
  :valueof (genericfoo2 "abc")
  :should be "0abc")

(test "defgeneric calls flag unknown types"
  :valueof (genericfoo2 (annotate 'unknowntype1 34))
  :should be '(#\0 tagged unknowntype1 34))
