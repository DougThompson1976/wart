alias nil? not
def (sym? _)
  (isa _ symbol)
def (list? _)
  (isa _ list)
def (num? _)
  (isa _ number)
def (string? _)
  (isa _ string)
def (table? _)
  (isa _ table)
def (fn? _)
  (isa _ function)
def (compiled_fn? _)
  (and (fn? _)
       (~cons? body._))



def (tag type val)
  (list 'object type val)

def (rep x)
  if (or ~cons?.x (car.x ~= 'object))
    x
    car:cddr.x

def (coerce x 'dest_type)
  eval `(coerce_quoted ,x ,dest_type)
<- Coercions (table)

mac (defcoerce src dest f)
  `(do
     (if (~table_get Coercions ',dest)
       (table_set Coercions ',dest (table)))
     (table_set (table_get Coercions ',dest) ',src ,f))

defcoerce nil list
  id

# arbitrary types in function position
mac (defcall type params ... body)
  `(defcoerce ,type function
     (fn(,car.params)
       (fn ,cdr.params
         ,@body)))



mac (as type expr)
  `(coerce ,expr ,type)

def! (compose f g)
  fn 'args
    eval `(,(as function f) (,(as function g) ,@args)) caller_scope

def (sig f)
  rep.f'sig

def! (body f)
  rep.f'body

def (env f)
  rep.f'env
