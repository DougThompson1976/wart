;; Functions support complex arg lists in wart.

(defmacro def(name params &rest body)
  `(defun ,name ,@(compile-params params body)))

(defmacro mac(name params &rest body)
  (wt-transform `(defmacro ,name ,@(compile-params params body))))

(defmacro fn(params &rest body)
  `(lambda ,@(compile-params params body)))



;; Internals
;; Use let* everywhere here because wart will soon override let

; returns arglist and body suitable for insertion into defun or lambda
; new body understands keyword args
; params format (optionals* ? lazy-optionals* . rest)
; optionals can be destructured
; lazy optionals require keywords if rest is present
(defun compile-params(params body)
  (let* ((args  (uniq)))
    `((&rest ,args)
        (let* ,(append
                 (get-required-arg-exprs params args))
          ,@body))))

(defun get-required-arg-exprs(params args)
  (map 'list
       (lambda(param)
         (list param
               `(get-arg ',param ',params ,args)))
       params))

(defun get-arg(var params args)
  (cond
    ((no params)  (values nil 'no-arg))
    ((no args)  (values nil 'no-arg))
    ((is (car params) var)  (car args))
    (t   (get-arg var (cdr params) (cdr args)))))
