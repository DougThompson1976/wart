def (foogen ... args)
  args
def (foogen s ... rest) :case (and no.rest sym?.s)
  s

(test "def :case can handle rest params"
  :valueof foogen.3
  :should be '(3))

(test "def :case can handle rest params - 2"
  :valueof (foogen 'a)
  :should be 'a)

mac (foogen2 ... body)
  `(list ,@body)
mac (foogen2 a b ... body) :case (a = 'random_sym)
  'went_through_case
(test "cases with more args shouldn't break the base case"
  :valueof (foogen2 35)
  :should be (list 35))   # shouldn't insert a nil for b in the :case

def (foogen3 a)
  a
def (foogen3 'z)
  'went_through_case
(test "def :case can handle quoted params"
  :valueof (foogen3 'a)
  :should be 'a)
(test "def :case can handle quoted params - 2"
  :valueof (foogen3 z)
  :should be 'went_through_case)

def (foogen4 a b)
  (list a b)
def (foogen4 'a b)
  'went_through_case
let x 3
  (test "def :case can handle selective param quoting"
    :valueof (foogen4 2 3)
    :should be '(2 3))
  (test "def :case can handle selective param quoting - 2"
    :valueof (foogen4 a x)
    :should be 'went_through_case)
