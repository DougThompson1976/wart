(test-wart "old coercions continue to work"
  :valueof (call (coerce 'car 'function) '(3))
  :should be 3)

(test-wart "call works on simple functions"
  :valueof (call 'car '(1))
  :should be 1)

(test-wart "call works on simple functions"
  :valueof (call 'car '(1))
  :should be 1)

(test-wart "call coerces to function when necessary"
  :valueof (call 'car '(1))
  :should be 1)

(test "flatten-last works"
  :valueof (flatten-last '(1 2 (3 4 5)))
  :should be '(1 2 3 4 5))

(test "flatten-last works on nil"
  :valueof (flatten-last nil)
  :should be nil)

(test "flatten-last works on non-lists"
  :valueof (flatten-last 3)
  :should be 3)

(test "flatten-last works on singleton"
  :valueof (flatten-last '(1))
  :should be '(1))

(test "flatten-last works on flat list"
  :valueof (flatten-last '(1 2 3))
  :should be '(1 2 3))

(test "flatten-last works on nested list"
  :valueof (flatten-last '(1 2 (3) 4 (5 6 (7))))
  :should be '(1 2 (3) 4 5 6 (7)))



(defmacro macfoo(a) `(+ 1 ,a))
(test-wart "call* handles macros"
  :valueof (call* macfoo 3)
  :should be 4)

(test-wart "call* works"
  :valueof (call* oddp 3)
  :should be t)

(setf a 2)
(test-wart "call* handles macros with global bindings"
  :valueof (call* macfoo a)
  :should be 3)

(test-wart "call* handles macros with bindings"
  :valueof (_let a 3 (call* macfoo a))
  :should be 4)

(test-wart "call* handles incf macro"
  :valueof (_let a 32 (call* incf a))
  :should be 33)

; integration test: nested calls
(test-wart "call* nests"
  :valueof (macex '(call* (call* a 3) 4))
  :should be '(call (fslot (call* a 3)) 4))
