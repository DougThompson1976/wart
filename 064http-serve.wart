#-darwin
(def http-serve(? num-workers 6 port 8080)
  (w/server-socket s port
    (spawning num-workers
      (accepting stream :from s
        (let req (parse-http-request ip stream)
          (w/stdout stream (dispatch req)))))))

#-win32
(def http-serve(? num-workers 6 port 8080)
  (w/server-socket s port
    (preforking num-workers
      (accepting stream :from s
        (let req (parse-http-request ip stream)
          (w/stdout stream (dispatch req)))))))



;; Internals

(def dispatch(req)
  (iflet handler (url-handler (cut req!path 1))
    (if consp.handler
      (apply handler.0 (cons req handler.1))
      (call handler req))
    (error-page http-notfound+)))

;; http://www.arclanguage.org/item?id=11337

(= liturls* (table)
   complex-urls* ())

(def url-handler(url)
  (or liturls*.url
      (find-complex-url (tokens url #\/))))

(def find-complex-url(ptoks ? cands complex-urls*)
  (whenlet (str (toks f)) car.cands
    (aif (match-complex-url ptoks toks)
      (list f it)
      (find-complex-url ptoks cdr.cands))))

(def match-complex-url(pc cc ? acc nil)
  (if (and no.pc no.cc)
    rev.acc
    (when (aand cc.0 (not empty.it))
      (case cc.0.0
        #\? (match-complex-url cdr.pc cdr.cc (cons car.pc acc))
        #\* (cons (intersperse #\/ pc) acc)
            (when (iso cc.0 pc.0)
              (match-complex-url cdr.pc cdr.cc acc))))))
