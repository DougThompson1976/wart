(def-ssyntax #\. 'foo*)
(def-ssyntax #\! 'bar* 1)

(test-lisp "ssyntax-idx returns index of rightmost ssyntax"
  :valueof (ssyntax-idx "a.b.cd")
  :should be 3)

(test-lisp "ssyntax-idx returns rightmost index of lowest-precedence ssyntax"
  :valueof (ssyntax-idx "a!b.c!e")
  :should be 3)

(test-lisp "ssyntaxp works"
  :valueof (ssyntaxp 'a.b)
  :should satisfy true_value)

(test-lisp "ssyntaxp ignores ordinary lisp tokens"
  :valueof (ssyntaxp 'a+b-c)
  :should be nil)

(test-lisp "expand-ssyntax works"
  :valueof (expand-ssyntax 'a.b)
  :should be '(foo* a b))

(test-lisp "expand-ssyntax works with ints in rhs"
  :valueof (expand-ssyntax 'a.3)
  :should be '(foo* a 3))

(test-lisp "expand-ssyntax works with ints in lhs"
  :valueof (expand-ssyntax '3.a)
  :should be '(foo* 3 a))

(test-lisp "expand-ssyntax works with negative ints"
  :valueof (expand-ssyntax 'a.-1)
  :should be '(foo* a -1))

(test-lisp "expand-ssyntax tracks precedence"
  :valueof (expand-ssyntax 'a.b!c)
  :should be '(foo* a (bar* b c)))
