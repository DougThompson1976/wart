let $mac mac
  mac! (mac (name ... params) ... body)
    if (car.body ~= :case)
      `(,$mac (,name ,@params) ,@body)
      `(let $super ,name
         (mac! (,name ... ($params | ,params))
           (if ,cadr.body
             (do ,@cddr.body)
             (cons $super $params))))

mac (def (name ... params) ... body) :case (car.body = :case)
  `(let $old ,name
     (def! (,name ... ($params | ,params))
       (if ,cadr.body
         (do ,@cddr.body)
         ($old @$params))))



## def with selectively quoted params
# We could just always use this, but it's faster to avoid the extra eval if
# possible.

quote <- (car ''1)

def (mem? atom tree)
  if (= atom tree)
       1
     cons?.tree
       (or (mem? atom car.tree)
           (mem? atom cdr.tree))

mac (def (name ... params) ... body) :case (and (car.body = :case)
                                                (mem? quote params))
  `(let $old ,name
     # keep $params uneval'd in case any params are quoted
     (def! (,name ... ('$params | ,params))
       (let $caller_scope caller_scope
         (if ,cadr.body
           (do ,@cddr.body)
           (eval `(,$old ,@$params) $caller_scope)))))



## rudimentary pattern matching for symbol constants
# should we get rid of the :case comparison and stop supporting quoted params
# above?

mac (def (name ... params) ... body) :case (and (car.body ~= :case)
                                                (mem? quote params))
  `(def (,name ,@params) :case (and ,@(map (fn(_)
                                             `(,_ = ',_))
                                           quoted.params))
     ,@body)

mac (mac (name ... params) ... body) :case (and (car.body ~= :case)
                                                (mem? quote params))
  `(mac (,name ,@params) :case (and ,@(map (fn(_)
                                             `(,_ = ',_))
                                           quoted.params))
     ,@body)

alias quote? predicate.quote
alias quoted? (cons? & quote?:car)

def (any_quoted? tree)
  if quoted?.tree
       1
     cons?.tree
       (or (any_quoted? car.tree)
           (any_quoted? cdr.tree))

def (quoted tree)
  if quoted?.tree
       (list cdr.tree)
     cons?.tree
       (join (quoted car.tree)
             (quoted cdr.tree))
