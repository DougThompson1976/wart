mac zap(f x)
  `(= ,x (,f ,x))

; infinite nil generator
= nils '(nil)   cdr.nils nils

mac wipe places
  `(= ,@(zip-flat places nils))

mac push(x seq)
  `(= ,seq (cons ,x ,seq))

mac pop(seq)
  `(do1 car.,seq
     (zap cdr ,seq))

mac shift places  ; multiple-eval to maintain places
  `(= ,@(zip-flat places cdr.places))

mac rotate places
  `(let $tmp ,car.places
     (shift ,@places $tmp))

mac swap(x y)
  `(rotate ,x ,y)

mac making(var val . body)
  `(between (dyn_bind ,var ,val) :and (dyn_unbind ,var)
     ,@body)

mac coerce!(var type)
  `(= ,var (coerce ,var ,type))
