(defcall cons l
  [elt l _])

(defset cons(l index val)
  (setf (elt l index)
        val))

(def wart-last(xs)
  (if (cdr xs)
    (wart-last cdr.xs)
    (car xs)))
(defover last wart-last)

(def mappend(f . args)
  (apply 'join (apply 'map0 f args)))

(def consif (x y)
  (if x
    (cons x y)
    y))

(defun split(test s)
  (if (consp s)
    (let tmp (split test cdr.s)
      (if (call testify.test car.s)
        (cons nil tmp)
        (cons (cons car.s car.tmp)
              cdr.tmp)))))
