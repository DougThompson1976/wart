let $iso iso ; ignore later refinements
  def isa(x 't)
    ($iso t type.x)

def sym?(_)
  (isa _ symbol)
def list?(_)
  (isa _ list)
def num?(_)
  (isa _ number)
def str?(_)
  (isa _ string)
def table?(_)
  (isa _ table)
def fn?(_)
  (isa _ function)



def tag(type val)
  (list 'type type val)

def rep(x)
  if (iso 'type car.x)
    (list_get x 2)
    x

def coerce(x 'dest-type)
  ((table_get (table_get coercions* dest-type) type.x) x)
assign coercions* (table)
def coerce-quoted'(x dest-type)
  ((table_get (table_get coercions* dest-type) type.x) x)

mac defcoerce($src $dest $f)
  `(do
     if (~table_get coercions* ',$dest)
       (table_set coercions* ',$dest (table))
     (table_set (table_get coercions* ',$dest) ',$src ,$f))

mac defcall($type $params . $body)
  `(defcoerce ,$type function (fn ,$params ,@$body))



let $assign assign
  mac assign($var $val)
    if sym?.$var
      `(,$assign ,$var ,$val)
      `((coerce ,car.$var function=) ,@cdr.$var ,$val)

defcoerce list function=
  (fn(_)
    (fn(idx val)
      (list_set _ idx val)))

let y '(1 2 3)
  assign y.1 4
  prn y

quit.
