def queue(l)
  (tag 'queue (list l lastcons.l len.l))

def enq(x q)
  do1 x
    let (l last len) rep.q
      (= rep.q.2 (+ len 1))
      if !l
        (= rep.q.1  (= rep.q.0 list.x))
        (= cdr.last list.x  rep.q.1 cdr.last)

def deq(q)
  let (l last len) rep.q
    ret ans car.l
      unless zero?.len
        (= rep.q.2 (- len 1))
      (= rep.q.0 cdr.l)

let $def def
  mac def($name $params . $body)
    if (~iso :case car.$body)
      `(,$def ,$name ,$params ,@$body)
      `(let $old ,$name
         ,$def ,$name ,$params
           if ,cadr.$body
             (do ,@$body)
             ($old ,@$params))

def len(x) :case (isa x queue)
  rep.x.2

prn:len:queue '(1 2 3 4)
