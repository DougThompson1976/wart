; modifying arbitrary types
; body must return a form that will be macro-eval'd
mac defset(type params . body)
  `(defcoerce ,type function=
     (mfn ',params
       ,@body))

mac def=(op params . body)
  `(table_set coercions* ',op (fn ,params ,@body))

; freeze sym assignment against future refinements
let $= =
  mac =(lhs rhs) :case (sym? lhs)
    `(,$= ,lhs ,rhs)

; basic type-based dispatch
mac =(lhs rhs) :case !sym?.lhs
  ; multiple-eval in case car.lhs needs assigning to
  `((table_get (table_get coercions* 'function=) (type ,car.lhs)) ,lhs ,rhs)

; keyword-based dispatch
mac =(lhs rhs) :case (and !sym?.lhs (table_get coercions* car.lhs))
  `((table_get coercions* ',car.lhs) ,@cdr.lhs ,rhs)
