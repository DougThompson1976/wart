;; Primitives for binding variables

(def wart-map(f . seqs)
  (apply 'map (type car.seqs) f seqs))
(defover map wart-map)

(mac with(parms . body)
  `(call (fn ,(map 'car pair.parms)
           ,@body)
         ,@(map 'cadr pair.parms)))

(mac wart-let(var val . body)
  `(with (,var ,val) ,@body))
(defover let wart-let)

(mac ret(var val . body)
  `(let ,var ,val ,@body ,var))

(mac withs(parms . body)
  (if (no parms)
      `(do ,@body)
      `(let ,(car parms) ,(cadr parms)
         (withs ,(cddr parms) ,@body))))
