(synonym newstring make-string)

(defcall string s
  [elt s _])

(defset string(s index val)
  (setf (elt s index)
        val))



(defmethod join args string
  (apply 'concatenate 'string (map [as string _] args)))
(defmethod join args character
  (apply 'concatenate 'string (map [as string _] args)))

(defcoerce character string
  [as string list._])
(defcoerce cons string
  [if (all [isa _ 'character] _)
    (cl-coerce _ 'string) ; base case
    (apply 'join _)]) ; recurse



(defgeneric upcase(s)
  (as string (map 'char-upcase s)))
(defmethod upcase(s) null
  nil)
(defmethod upcase(s) symbol
  )
(defmethod upcase(s) character
  (char-upcase s))

(defgeneric downcase(s)
  (as string (map 'char-downcase s)))
(defmethod downcase(s) null
  nil)
(defmethod downcase(s) symbol
  )
(defmethod downcase(s) character
  (char-downcase s))



(def mkstr args
  (with-output-to-string(s)
    (each a args
      (princ upcase.a s))))

(def sym args
  (intern (apply 'mkstr args)))

(defcoerce string symbol
  'sym)
(defcoerce symbol string
  [map 'char-downcase (symbol-name _)])

(defcoerce symbol cons
  [as cons (as string _)])
(defcoerce cons symbol
  [intern (as string _)])



(synonym letter alpha-char-p)
(synonym digit digit-char-p)
(def alphadig(c) (or (letter c) (digit c)))

(def punc(c)
  (in c #\. #\, #\; #\: #\! #\?))

(def whitec(c)
  (in c #\space #\newline #\tab #\return))

(def trim(s ? from 'both all-of '(#\space #\newline #\tab #\return))
  (case from
    'both   (string-trim all-of s)
    'front  (string-left-trim all-of s)
    'start  (string-left-trim all-of s)
    'back   (string-right-trim all-of s)
    'end    (string-right-trim all-of s)))

(def tokens(s ? sep 'whitec)
  (let rec (afn(cs toks tok)
             (if no.cs   (consif tok toks)
               (call testify.sep car.cs)   (self cdr.cs (consif tok toks) nil)
               :else  (self cdr.cs toks (cons car.cs tok))))
    (rev (map [as string _]
              (map 'rev (call rec (as cons s) nil nil))))))

(def intersperse(x ys ? as (if (isa last.ys 'string)
                             'string
                             'cons))
  (if ys
    (coerce (cons car.ys (mappend [list x _]
                                  cdr.ys))
            as)))
