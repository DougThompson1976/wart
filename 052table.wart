defcall table (h k default)
  (or (table_get h k) default)

defset table ((h k) v)
  `(table_set ,h ,k ,v)

defcoerce table list
  table_to_list

let $table table  # ignore later refinements
  defcoerce nil table
    $table

  defcoerce list table
    (fn(_)
      (ret h ($table)
        (each (k v) _
          (h.k <- v))))

def! (table ... args)
  (as table pair.args)

def (copy x) :case table?.x
  (as table (as list x))

def (len x) :case table?.x
  table_length.x

def (keys h)
  map car (as list h)

def (vals h)
  map cadr (as list h)

def (x = y) :case table?.x
  (and table?.y
       (len:keys.x = len:keys.y)
       (all (fn((k v))
              (= y.k v))
            (as list x)))

def (is_match x y) :case table?.x
  (and table?.y
       (len:keys.x = len:keys.y)
       (all (fn((k v))
              (is_match v y.k))
            (as list x)))

mac (w_table h ... body)
  `(ret ,h (table)
     ,@body)
