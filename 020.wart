; (mac foo(x) `(+ 1 ,x))) (let x 3 (foo x)) => 4
assign mac (mfn '($name $params . $body)
  `(assign ,$name (mfn ',$params
                    ,@$body)))

mac def($name $params . $body)
  `(assign ,$name (fn ,$params ,@$body))

def compose(f g)
  mfn '$args
    `(,f (,g ,@$args))

def complement(f)
  (compose not f)

mac let($var $val . $body)
  `((fn(,$var) ,@$body) ,$val)

mac do $body
  `((fn() ,@$body))



def prn args
  (pr (str @args "
"))
  car.args

def test(msg valueof should expected)
  if (should valueof expected)
    (pr "|")
    (do
      inc_failures.
      prn.
      (prn "F " msg)
      (prn "  got " valueof))

def pending-test'(msg valueof should expected)
  prn.
  (prn "pending: " msg)

mac alias(new old)
  `(def ,new $args
     (,old @$args))

alias be iso
