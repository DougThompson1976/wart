(unbind x)
(skipping_undefined_vars
  (test "all operations on unbound vars within 'speculatively get postponed"
    :valueof (speculatively (if 34 (cons x 3)))
    :should be (tag incomplete_eval_data `(,cons x 3)))

  (test "speculatively postpones all operations on unbound vars"
    :valueof (speculatively+eval '(if 34 (cons x 3)))
    :should be (tag incomplete_eval_data `(,if 34 (,cons x 3))))
)

(test "freeze replaces syms with their global bindings where possible"
  :valueof (freeze '(if a b))
  :should be `(,if a b))

(test "freeze skips quoted parts"
  :valueof (freeze ''(if a b))
  :should be ''(if a b))

(test "inline works on fn objects"
  :valueof (inline `(,(tag function (table 'sig '(a b) 'body '((cons a b))))
                     x y))
  :should be '((cons x y)))

(test "inline works on quoted functions"
  :valueof (inline `(,(tag function (table 'sig '('a) 'body '(a)))
                     x))
  :should be '('x))

(test "inline works with rest params"
  :valueof (inline `(,(tag function (table 'sig 'a 'body '(a)))
                     x))
  :should be '((x)))

(test "inline works with quoted rest params"
  :valueof (inline `(,(tag function (table 'sig ''a 'body '(a)))
                     x y))
  :should be '('(x y)))

(test "inline works with quoted rest params - 2"
  :valueof (inline `(,(tag function (table 'sig ''a 'body '((car a))))
                     x y))
  :should be '((car '(x y))))

(test "inline works with keyword args"
  :valueof (inline `(,(tag function (table 'sig '(a b) 'body '((cons a b))))
                     x :a y))
  :should be '((cons y x)))
