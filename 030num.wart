let $+ +
  def + xs
    (reduce $+ xs)

let $- -
  def - xs
    (reduce $- xs)

let $* *
  def * xs
    (reduce $* xs)

let $/ /
  def / xs
    (reduce $/ xs)

let $% %
  def % xs
    (reduce $% xs)

(let $> >
  def > xs
    (all (fn((x y)) ($> x y))
         pairwise.xs)

  def < xs
    (all (fn((x y)) ($> y x))
         pairwise.xs))

mac ++($n)
  `(= ,$n (+ ,$n 1))

mac --($n)
  `(= ,$n (- ,$n 1))



def zero?(n)
  (iso n 0)

def divides(nr dr)
  (zero?:% nr dr)

def even?(n)
  (divides n 2)

= odd? ~even?
