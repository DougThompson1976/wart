(test "wt-transform works on if"
  :valueof (wt-transform '(if a b c))
  :should be '(wart-if a b c))

(test "wt-transform works through defuns"
  :valueof (wt-transform '(defun foo(n) (if a b c)))
  :should be '(defun foo(n) (wart-if a b c)))

(test "lookup-quoted-handler handles function-names"
  :valueof (lookup-quoted-handler 'if)
  :should be 'wart-if)

(test "wt-transform-1 handles quoted special names"
  :valueof (wt-transform-1 '(quote if))
  :should be '(quote wart-if))

(test "wt-transform handles quoted special names"
  :valueof (wt-transform '(backq-list* 'if))
  :should be '(backq-list* 'wart-if))

(test "wt-transform works through backquote"
  :valueof (_let a 3 `(if ,a b c))
  :should be '(wart-if 3 b c))

(test "wt-transform works through defmacro"
  :valueof (wt-transform '(defmacro foo(n) `(if ,n b c d e)))
  :should be '(defmacro foo(n) `(wart-if ,n b c d e)))



(test "new redefined if with one branch"
  :valueof (if nil 3)
  :should be nil)

(test "new redefined if with one branch - 2"
  :valueof (if t 3)
  :should be 3)

(test "new redefined if with two branches"
  :valueof (if t 3 4)
  :should be 3)

(test "new redefined if with two branches - 2"
  :valueof (if nil 3 4)
  :should be 4)

(test "new redefined if with three branches"
  :valueof (if (> 3 2) 3 (> 3 4) 5 6)
  :should be 3)

(test "new redefined if with three branches - 2"
  :valueof (if (< 3 2) 3 (< 3 4) 5 6)
  :should be 5)

(test "new redefined if with three branches - 3"
  :valueof (if (< 3 2) 3 (< 3 3) 5 6)
  :should be 6)

(wt-eval '(= a 3))
(test "= works"
  :valueof a
  :should be 3)

(wt-eval '(++ a))
(test "++ works"
  :valueof a
  :should be 4)
