;; http server: http://www.arclanguage.org/item?id=11337
;; assumes it's behind a reverse proxy
(def http-serve(? port 8080)
  (w/server-socket s port
    (accepting stream :from s
      (handle-req stream))))

(def http-handler(req)
  (prn "Hello, world!"))



;; Internals

; TODO: IP: check and use X-Real-IP
(def handle-req(stream)
  (let req (read-req stream)
    (read-body req stream)
    (w/stdout stream
      (http-handler req))))

(def read-req (? from stdin*)
  (withs ((m pa pro) (read-reqline from)
          (rpa qs)   (tokens pa #\?)
          hds        (read-headers from))
    (inst 'http-req  'prot pro  'meth (call sym^downcase m)
                     'path rpa  'qs qs   'hds hds
                     'cooks (parse-cooks hds)
                     'args (call only.parse-args qs))))

(def normalize-hdname(name)  ; "content-type" -> "Content-Type"
  (call join^intersperse #\- (map 'capitalize (tokens name #\-))))

(def read-headers(? from stdin*)
  (unless (iso #\newline (peek-char nil from))  ; for suckers using \n instead of \r\n
    (let line (read-line from)
      (awhen (pos #\: line)
        (cons (list (call normalize-hdname^cut line 0 it)
                    (call trim^cut line (+ it 1)))
              (read-headers from))))))

(def read-reqline(? from stdin*)
  (call tokens^read-line from))

(def parse-cooks(reqhds)
  (reduce 'join
    (map [map [tokens trim._ #\=]
              (tokens _.1 #\;)]
         (keep [iso "Cookie" car._] reqhds))))

(def parse-args(argstr)  ; "foo=bar&baz=42" -> (("foo" "bar") ("baz" "42"))
  (map [map urldecode (tokens _ #\=)]
       (tokens argstr #\&)))

(def read-body(req ? from stdin*)
  ; todo
  )



(= http-ok+         "200 OK"
   http-created+    "201 Created"
   http-found+      "302 Found"
   http-notmod+     "304 Not Modified"
   http-bad+        "400 Bad Request"
   http-forbidden+  "403 Forbidden"
   http-notfound+   "404 Not Found")

(deftem http-msg()
  prot  nil     ; protocol  "HTTP/1.1"
  hds   nil)    ; headers   (("Content-Type" "html") ("Location" "/new"))

(deftem http-req(http-msg)
  meth    nil    ; method [downcased sym]    get, post
  path    nil    ; path                      "/some/thing"
  qs      nil    ; query string              "foo=bar&baz=42"
  args    nil    ; args of the qs/form post  (("foo" "bar") ("baz" "42"))
  cooks   nil)   ; sent cookies              (("sessid" "MTgY4h2"))

(deftem http-resp(http-msg)
  sta     nil    ; status code   404
  rea     nil)   ; reason        "Not Found"

(= http-hds*     (obj Server        "http.arc"
                      Content-Type  "text/html"  ; set encoding in your HTML
                      Connection    "closed")
   stop-http*    nil
   http-handler  nil)  ; ** the function your web app has to define **
