(wt-eval '(= x 3))
(test "= works like setf by default"
  :valueof x
  :should be 3)

(test "= assigns in parallel"
  :valueof (progn
             (= x 4 y x)
             (list x y))
  :should be '(4 3))

(test "=* assigns in series"
  :valueof (progn
             (=* x 2 y x)
             (list x y))
  :should be '(2 2))

(wt-eval '(progn
            (= y nil)
            (push 13 y)
            (= (car y) 47)))
(test "= works like setf on lists"
  :valueof y
  :should be '(47))

(defset footype(f index value)
  (push (+ index value) (rep f)))

(test "defset augments setf behavior for new types"
  :valueof (let ((f (annotate 'footype nil)))
             (setf (call-fn f 3) 4)
             f)
  :should be '(tagged footype (7)))

(test "set after defset returns rhs"
  :valueof (let ((f (annotate 'footype nil)))
             (setf (call-fn f 3) 4))
  :should be '(7))
