; integration tests: url-handler and defurl

(wt-eval '(defurl foo(req)
            (prn 42)))
(test "defurl works on simple urls"
  :valueof (call liturls* "foo")
  :should satisfy true_value)

(test "url-handler finds simple urls"
  :valueof (url-handler "foo")
  :should satisfy true_value)

(wt-eval '(defurl user/?(req user)
            (prn user)))
(test "defurl works with complex urls"
  :valueof complex-urls*
  :should match '(("user/?" (("user" "?") _))))

(test "url-handler finds complex urls"
  :valueof (url-handler "/user/foo")
  :should satisfy consp)



; integration tests: defurl+complexpath+dispatch

(test "dispatch handles simple urls"
  :valueof (let port (+ 1024 rand.80)
             ; server
             (w/server-socket s port
               (fork (accepting stream :from s
                       (w/stdout stream
                         (dispatch (parse-http-request ip stream))))))
             ; client
             (skipping sb-bsd-sockets:socket-error
               (call (http-get (join "127.0.0.1:" port "/foo"))
                     'body)))
  :should be "42")

(wt-eval '(defurl path/*(req path)
            (prn path)))
(test "dispatch handles complex urls with *"
  :valueof (let port (+ 1024 rand.80)
             ; server
             (w/server-socket s port
               (fork (accepting stream :from s
                       (w/stdout stream
                         (dispatch (parse-http-request ip stream))))))
             ; client
             (skipping sb-bsd-sockets:socket-error
               (call (http-get (join "127.0.0.1:" port "/path/foo/bar/baz"))
                     'body)))
  :should be "foo/bar/baz")
