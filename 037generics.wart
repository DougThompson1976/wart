(ignore-redef
  (def iso(x y)
    (or (equal x y)
        (and (consp x)
             (consp y)
             (iso car.x car.y)
             (iso cdr.x cdr.y)))))

(def iso(x y) :case (not (or atom.x listp.x))
  (iso (as cons x) (as cons y)))

(def iso(x y) :case (isa x 'hash-table)
  (and (iso (length keys.x) (length keys.y))
       (all
         (fn((k v))
           (iso y.k v))
         (coerce x 'cons))))
