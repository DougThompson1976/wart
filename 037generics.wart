(def testify(x)
  (or (function-value x)
      [iso _ x]))
(def testify(x) :case (isa x 'function)
  (function-value x))
(def testify(x) :case (isa x 'cons)
  [find _ x])

(ignore-redef
  (def len(x)
    (if x
      (length (as cons x))
      0)))

(def len(x) :case (isa x 'hash-table)
  (hash-table-count x))

(def empty(x)
  (iso 0 len.x))



(ignore-redef
  (def iso(x y)
    (or (equal x y)
        (and (consp x)
             (consp y)
             (iso car.x car.y)
             (iso cdr.x cdr.y)))))

(def iso(x y) :case (isa x 'hash-table)
  (and (iso (length keys.x) (length keys.y))
       (all
         (fn((k v))
           (iso y.k v))
         (coerce x 'cons))))



(def reclist(f xs)
  (and xs
       (or (call f xs)
           (reclist f cdr.xs))))
(def reclist(f s) :case (not (listp s))
  (reclist f (as cons s)))

(def wart-some(f seq)
  (reclist f^car seq))
(defover some wart-some)

(def all(test xs)
  (call ~some ~testify.test xs))

(def mem(test seq)
  (reclist [if (call testify.test car._) _]
           seq))

(deftransform wart-keep(f seq)
  (if (no seq)          nil
      (call f car.seq)  (cons car.seq (keep f cdr.seq))
                        (keep f cdr.seq)))
(defmethod wart-keep(f s) string
  )
(defover keep wart-keep)

(def wart-rem(test seq)
  (keep ~testify.test seq))
(defover rem wart-rem)

(def trues (f xs)
  (and xs
       (iflet fx (call f car.xs)
          (cons fx (trues f cdr.xs))
          (trues f cdr.xs))))

(ignore-redef
  (defgeneric* join args
    (apply 'concatenate (type (last (rem nil args))) args)))

(defgeneric pos(test s ? idx 0)
  (position-if testify.test s :start idx))
(defgeneric rpos(test s ? idx 0)
  (position-if testify.test s :from-end t :start idx))

(defgeneric wart-map(f . seqs)
  (if (subtypep (type car.seqs)
                'sequence)
    (apply 'map0 f seqs)
    (apply f seqs)))
(defover map wart-map)
