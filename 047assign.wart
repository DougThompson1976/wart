; basic type-based dispatch
mac =. (lhs rhs) :case list?.lhs
  ; multiple-eval in case car.lhs needs assigning to
  `((table_get (table_get Coercions 'setter) (type ,car.lhs)) ,lhs ,rhs)

; support new types in =
; body must return a form that will be macro-eval'd
mac defset(type params . body)
  `(defcoerce ,type setter
     (fn ',params
       (eval (do ,@body) caller_scope)))



; keyword-based dispatch
mac =. (lhs rhs) :case (and list?.lhs (table_get Coercions car.lhs))
  `((table_get Coercions ',car.lhs) ,@cdr.lhs ,rhs)

; support new keywords in =
mac def_assign(op params . body)
  `(table_set Coercions ',op (fn ,params ,@body))



; serial assignment
; this should be after clauses inspecting args
let $=. =.
  mac! =. args
    if args
      `(ret $ans ,cadr.args
         (,$=. ,car.args $ans)
         (= ,@cddr.args))
