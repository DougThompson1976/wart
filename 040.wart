<- mac!
   (fn '((name ... params) ... body)
     (eval `(,name <- (fn ',params
                        # remember to update isMacro if you change this
                        (eval ((fn() ,@body))
                              caller_scope)))
           caller_scope))

mac! (def! (name ... params) ... body)
  `(,name <- (fn ,params ,@body))

def! (prn ... args)
  (if args
    (do
      (pr car.args)
      (prn @cdr.args)
      car.args)
    (pr "
"))

mac! (def (name ... params) ... body)
  if (bound? name)
    (prn "redef: " name)
  `(def! (,name ,@params) ,@body)

mac! (mac (name ... params) ... body)
  if (bound? name)
    (prn "redef: " name)
  `(mac! (,name ,@params) ,@body)

mac (alias new old)  ## include later refinements
  `(mac (,new ... $args)
     `(,,old ,@$args))

def (id _)
  _
alias present? id
alias no not

mac! (let var val ... body)
  `((fn(,var) ,@body) ,val)

mac! (do ... body)
  `((fn() ,@body))
