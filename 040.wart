= mac! (fn '(name params ... body)
  (mac_eval `(= ,name (fn ',params
                        # remember to update isMacro if you change this
                        (mac_eval ((fn() ,@body))
                                  caller_scope)))
            caller_scope))

mac! def!(name params ... body)
  `(= ,name (fn ,params ,@body))

mac! let(var val ... body)
  `((fn(,var) ,@body) ,val)

let if if   # ignore later refinements for the rest of this file

  mac! do body
    `((fn() ,@body))

  mac! (.) (f x)
    `(,f ,x)

  mac! (.-) (f x)
    `(,f (- ,x))

  def! prn args
    (if args
      (do
        (pr car.args)
        (prn @cdr.args)
        car.args)
      (pr "
"))

  mac! def(name params ... body)
    if bound?.name
      (prn "redef: " name)
    `(def! ,name ,params ,@body)

  mac! mac(name params ... body)
    if bound?.name
      (prn "redef: " name)
    `(mac! ,name ,params ,@body)

  mac alias(new old)  # include later refinements
    `(mac ,new $args
       `(,,old ,@$args))

  def compose(f g)
    fn 'args
      mac_eval `(,f (,g ,@args)) caller_scope

  alias (:) compose

  def complement(f)
    (compose not f)

  alias (~) complement

  def list args
    if args
      (cons car.args
            (list @cdr.args))

  def map(f seq)
    if seq
      (cons (f car.seq)
            (map f cdr.seq))

  alias cadr car:cdr
  alias cddr cdr:cdr

  def id(_)
    _
  alias present? id
  alias no not

  = quote (car ''1)
  def quote?(_) (iso _ quote)
  alias quoted? quote?:car
  = backquote (car '`(1))
  def backquote?(_) (iso _ backquote)
  alias backquoted? backquote?:car
  = unquote (car:cadr '`(,1))
  def unquote?(_) (iso _ unquote)
  alias unquoted? unquote?:car
  = unquote_splice (car:cadr '`(,@1))
  def unquote_splice?(_) (iso _ unquote_splice)
  alias unquote_spliced? unquote_splice?:car
  = splice (car '@1)
  def splice?(_) (iso _ splice)
  alias spliced? splice?:car

  def die args
    prn @args
    (quit)
