def (petrify)
  (update_macroexpansions)
  (update_optimized_bodies)

def (update_macroexpansions)
  each (var val) (globals)
    (update_expansion val)

def (update_macroexpansion val)
  when (mac? val)
    (<- (rep.val 'expander)
        (ret m copy.val
          (zap! strip_eval body.m)))

def (macex call env)
  let (m ... args) call
    let mval (eval m env)
      unless (rep.mval 'expander)
        update_macroexpansion mval
      if (~mac? mval)
        call
        ((rep.mval 'expander) @args)

def (macex_all forms)
  (map macex forms)

def (strip_eval exprs)
  transform exprs :thru
    _.0  # macro body always has just one expr
      _.1  # strip away (eval .. caller_scope)
    list # re-enclose in body
