def (petrify)
  (update_macroexpansions)
  (update_optimized_bodies)

def (update_macroexpansions)
  prn "computing expansions"
  each (var val) (globals)
    (update_macroexpansion val)

def (update_macroexpansion val)
  when (mac? val)
    (<- (rep.val 'expander)
        (ret m copy.val
          (zap! strip_eval body.m)))

def (macex call env)
  if cons?.call
    let form (macex1 call env)
      (map (fn(_) (macex strip_already_evald._ env)) form)
    call

def (macex1 call env)
  backstopped_by call
    when (list? call)
      let (m ... args) call
        when (bound? m env)
          let mval (eval m env)
            unless (rep.mval 'expander)
              update_macroexpansion mval
            when (mac? mval)
              ((rep.mval 'expander) @args)

def (macex_all forms)
  (map macex forms)

def (strip_eval exprs)
  transform exprs :thru
    _.0  # macro body always has just one expr
      _.1  # strip away (eval .. caller_scope)
    list # re-enclose in body
