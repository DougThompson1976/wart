(test "tables work in function position"
  :valueof (let h (table)
             (table_set h 3 4)
             h.3)
  :should be 4)

(test "get on tables takes a default"
  :valueof (let h (table)
             (h 3 5))
  :should be 5)

(test "tables can be assigned to"
  :valueof (let h (table)
             (= h.3 4)
             h.3)
  :should be 4)

(test "each works on tables"
  :valueof (ret ans 0
             (each (k v) (table 1 2 3 4)
               ++ans))
  :should be 2)

(test "iso works on tables"
  :valueof (iso (table) (table))
  :should ~be nil)

(test "iso works on tables - 2"
  :valueof (iso (table 'a 1 'b 2) (table 'b 2 'a 1))
  :should ~be nil)

(test "is_match works on table values"
  :valueof (is_match (table 'a '_) (table 'a 'x))
  :should ~be nil)

(test "lists coerce to tables"
  :valueof (as table '((1 2) (3 4)))
  :should be (ret x (table)
               (x.1 = 2)
               (x.3 = 4)))

(test "tables coerce to lists"
  :valueof (as table (as list (table 1 2 3 4)))
  :should be (table 1 2 3 4))
