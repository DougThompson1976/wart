def sym?(_)
  (isa _ symbol)
def list?(_)
  (isa _ list)
alias cons? list?
def num?(_)
  (isa _ number)
def str?(_)
  (isa _ string)
def table?(_)
  (isa _ table)
def fn?(_)
  (isa _ function)



def tag(type val)
  (list 'type type val)

def rep(x)
  if (~iso 'type car.x)
    x
    (list_get x 2)

def coerce(x 'dest-type)
  eval `(coerce-quoted ,x ,dest-type)
= coercions* (table)
def coerce-quoted'(x dest-type)
  ((table_get (table_get coercions* dest-type) type.x) x)

mac defcoerce(src dest f)
  `(do
     if (~table_get coercions* ',dest)
       (table_set coercions* ',dest (table))
     (table_set (table_get coercions* ',dest) ',src ,f))

mac defcall(type params . body)
  `(defcoerce ,type function
     (fn(,car.params)
       (fn ,cdr.params
         ,@body)))



mac defset(type params . body)
  `(defcoerce ,type function=
     (mfn ',params
       ,@body))

mac def=(op params . body)
  `(table_set coercions* ',op (fn ,params ,@body))

let $= =
  mac =(var val)
    (if
      sym?.var
        `(,$= ,var ,val)
      (table_get coercions* car.var)
        `((table_get coercions* ',car.var) ,@cdr.var ,val)
      :else
        ; multiple-eval in case car.var needs assigning to
        `((table_get (table_get coercions* 'function=) (type ,car.var)) ,var ,val))
