(test "arithmetic is varargs"
  :valueof (+ 1 2 3 (* 1 2 2))
  :should be 10)

(test "unary negation works"
  :valueof (- 3)
  :should be -3)

(test "division works"
  :valueof (/ 4 2 2)
  :should be 1)

(test "increment works with lexical vars"
  :valueof (ret x 3 ++.x)
  :should be 4)

(test "divides works"
  :valueof (divides 3 2)
  :should be nil)

(test "divides works - 2"
  :valueof (divides 4 2)
  :should ~be nil)

(test "comparing anything to nil always returns nil"
  :valueof (< 3 nil)
  :should be nil)

(test "> works"
  :valueof (> 3 2 1)
  :should ~be nil)

(test "> works - 2"
  :valueof (> 3 1 2)
  :should be nil)

(test "< works"
  :valueof (< 3 1 2)
  :should be nil)

(test "< works - 2"
  :valueof (< 1 2 3)
  :should ~be nil)

(test "< works inside if"
  :valueof (if (3 < 0) 34 35)
  :should be 35)

(test "<= works"
  :valueof (<= 1 2 3)
  :should ~be nil)

(test "<= works - 2"
  :valueof (<= 1 1 3)
  :should ~be nil)

(test "<= works - 3"
  :valueof (<= 1 4 3)
  :should be nil)

(test ">= works"
  :valueof (>= 3 2 1)
  :should ~be nil)

(test ">= works - 2"
  :valueof (>= 3 1 1)
  :should ~be nil)

(test ">= works - 3"
  :valueof (>= 3 1 2)
  :should be nil)

(test "max works"
  :valueof (max 0 5 7 9 3 4 21 15)
  :should be 21)

(test "< works with scorer"
  :valueof (<.str 'a 'b)
  :should ~be nil)

(test "sort works"
  :valueof (sort (<) '(1 12 3))
  :should be '(1 3 12))

(test "sort works with scorer"
  :valueof (sort <.str '(1 2 10))  ; lexicographic sort
  :should be '(1 10 2))

(test "floats compare to within a tolerance"
  :valueof (2 >= 2.0000001)
  :should ~be nil)

(test "sum works with zero args"
  :valueof (sum nil)
  :should be 0)

(test "sum works with one arg"
  :valueof (sum '(2))
  :should be 2)

(test "sum works with multiple args"
  :valueof (sum '(1 2 3))
  :should be 6)

(test "range checks work"
  :valueof (1 <= 1 <= 2)
  :should ~be nil)

(test "range checks work - 2"
  :valueof (3 >= 2 > 2)
  :should be nil)
