(test "read works"
  :valueof (fromstring "34" (read))
  :should be 34)

(test "read works on strings"
  :valueof (fromstring "\"abc\"" (read))
  :should be "abc")

(test "read works on userdefined types"
  :valueof (type (fromstring "(tagged footype 34)" (read)))
  :should be 'footype)

(test "read and write work on tables"
  :valueof (withs (h  (obj a 1 b 2)
                   hs (tostring write.h))
             (iso h (fromstring hs (read))))
  :should be t)

(test "unserialize nests through lists"
  :valueof (unserialize `(1 2 ,(annotate 'hash-table nil)))
  :should be `(1 2 ,(table)))

(test "serialize nests though lists"
  :valueof (serialize (list (table)))
  :should be '((tagged hash-table nil)))

(test "serialize nests through tables"
  :valueof (alref 3 (rep (serialize (obj 1 2 3 (annotate 'footype 34)))))
  :should be '((tagged footype 34)))

(test "unserialize nests through tables"
  :valueof (type (call (unserialize '(tagged hash-table ((1 2)
                                                   (3 (tagged footype 34)))))
                   3))
  :should be 'footype)

(test "unserialize nests through tables"
  :valueof (type (call (unserialize
                         '(tagged hash-table ((1 2) (3 (tagged footype 34)))))
                   3))
  :should be 'footype)

(test "unserialize handles nested tables"
  :valueof (rep (call (unserialize
                        '(tagged hash-table ((1 2) (3 (tagged hash-table nil)))))
                   3))
  :should be (make-hash-table))
