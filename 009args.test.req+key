(defun foo() 34)
(test-wart "simple defun works as before"
  :valueof (foo)
  :should be 34)

(progn
  (defun foo0() 3)
  (defun foo1() (+ 1 (foo0))))
(test-wart "nested defuns work as before"
  :valueof (foo1)
  :should be 4)

(progn
  (defmacro foo2(n) `(+ 1 ,n))
  (defmacro foo3(n) `(+ 1 (foo2 ,n))))
(test-wart "nested macros work as before"
  :valueof (foo3 2)
  :should be 4)

(test "keyword-args works"
  :valueof (keyword-args '(1 2 :a 3))
  :should be '((a . 3)))

(test "positional-args works"
  :valueof (positional-args '(1 2 :a 3 4))
  :should be '(1 2 4))

(test "get-arg works for required args"
  :valueof (multiple-value-list
             (get-arg 'c '(a b c) '(1 2 3) ()))
  :should be (list 3))

(test "get-arg works for keyword args"
  :valueof (multiple-value-list
             (get-arg 'a '(a b c d e f g)
                         '(2 3 4 5 6 7 8) '((a . 1))))
  :should be (list 1))

(test "get-arg works on args with keywords"
  :valueof (multiple-value-list
             (get-arg 'd '(a b c d e f g)
                         '(2 3 4 5 6 7 8) '((a . 1))))
  :should be (list 4))

(test "get-arg works for nil args"
  :valueof (multiple-value-list (get-arg 'b '(a b) '(3 nil) ()))
  :should be (list nil))



(wt-eval '(def foo4() 34))
(test-wart "simple def"
  :valueof (foo4)
  :should be 34)

(wt-eval '(mac foo5(n) `(+ ,n 1)))
(test-wart "simple mac"
  :valueof (foo5 32)
  :should be 33)

(wt-eval '(def foo6() (cons 3 4)))
(test-wart "def 2"
  :valueof (foo6)
  :should be (cons 3 4))

(wt-eval '(def foo8(b) b))
(test-wart "'required' params are really just optional"
  :valueof (foo8)
  :should be nil)

(wt-eval '(def foo12(a b) (- a b)))
(test-wart "allow param names"
  :valueof (foo12 :a 3 :b 4)
  :should be -1)

(test-wart "allow just some param names"
  :valueof (foo12 :a 3 4)
  :should be -1)

(test-wart "allow args in any order when giving param names"
  :valueof (foo12 :b 3 :a 4)
  :should be 1)

(test-wart "take positional args in order after keyword args have been matched"
  :valueof (foo12 3 :a 4)
  :should be 1)

; integration test: bracket + fn + call
(test-wart "call works on lambdas"
  :valueof (call [+ _ 1] 3)
  :should be 4)
