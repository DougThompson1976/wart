(mac iflet(var expr then . rest)
  (w/uniq gv
    `(let ,gv ,expr
       (if ,gv (let ,var ,gv ,then) ,@rest))))

(mac whenlet(var expr . body)
  `(iflet ,var ,expr (do ,@body)))

(mac aif(expr . body)
  `(let it ,expr
     (if it
         ,@(if (cddr body)
               `(,car.body (aif ,@cdr.body))
               body))))

(mac awhen(expr . body)
  `(let it ,expr (if it (do ,@body))))

(mac rfn(name parms . body)
  `(labels ((,name ,parms ,@body))
     #',name))

(mac afn(parms . body)
  `(rfn self ,parms ,@body))

(mac in(x . choices)
  (w/uniq g
    `(let ,g ,x
       (or ,@(map (fn(c) `(is ,g ,c)) choices)))))

(mac caselet(var expr . args)
  (let ex (afn(args)
            (if (no cdr.args)
                (car args)
                `(if (iso ,var ',(car args))
                     ,(cadr args)
                     ,(self cddr.args))))
    `(let ,var ,expr ,(call ex args))))

(mac wart-case(expr . args)
  `(caselet ,(uniq) ,expr ,@args))
(defover case wart-case)

(mac check(expr test ? alt nil)
  (w/uniq x
    `(let ,x ,expr
       (if (call ',test ,x)
         ,x
         ,alt))))

(def orf fns
  (fn args
    (call (afn(fs)
            (and fs
                 (or (apply car.fs args)
                     (self cdr.fs))))
          fns)))

(def andf fns
  (fn args
    (call (afn(fs)
            (if (no fs)   t
                (no cdr.fs)   (apply car.fs args)
                              (and (apply car.fs args)
                                   (self cdr.fs))))
          fns)))

(mac ifcall(var . args)
  `(when (bound ',var)
     (call ,var ,@args)))

(mac pushif(elem ls)
  `(aif ,elem
     (push it ,ls)))

(mac disabled body
  `(when nil ,@body))

(mac enabled body
  `(when t ,@body))
