  You can't really know anything if you just remember isolated facts.
  If the facts don't hang together on a latticework of theory, you don't
  have them in a usable form.

      -- Charlie Munger (http://ycombinator.com/munger.html)


  More than source code, specifications or documentation, a programmer builds
  a theory of how certain affairs will be handled by a computer program.

      -- paraphrasing Peter Naur, Programming as Theory Building
         (http://alistair.cockburn.us/ASD+book+extract%3A+%22Naur,+Ehn,+Musashi%22)


Can the theory of a codebase be transmitted more easily between programmers?
Most software either makes no attempt to rigorously state what it's trying to
do, or does so using the isolated facts of tests. This codebase is an
experiment in structuring tests into a higher-level organization.

Transmitting theory requires more than just the codebase at hand. Some amount
of the creator's belief system.


  If I look at any small part of it, I can see what is going on -- I don't
  need to refer to other parts to understand what something is doing.

  If I look at any large part in overview, I can see what is going on -- I
  don't need to know all the details to get it.

  Every level of detail is as locally coherent and as well thought-out as any
  other level.

      -- Richard Gabriel, The Quality Without A Name
         (http://dreamsongs.com/Files/PatternsOfSoftware.pdf, page 42)

Outline of the project. Christopher Alexander's theory of 'misfit-driven
design'.

tests help reading a codebase. what does this line do? comment it out and
rerun the tests.

version control helps reading a codebase. this function is too complex; go
back in time to a simpler version that exposes the skeleton.

Misfits for the overall structure:

  avoiding duplication between adding a file to a project and asking for it to
  be built

  facilities for the enumeration of past designs, with their tests. so the
  reader can see how the design changed in response to new constraints.

some transitions are abrupt; this is deliberate. In spite of the volume of
prose, this isn't a novel. It's a design, and abrupt transitions serve to
punctuate the boundaries between subsystems.
