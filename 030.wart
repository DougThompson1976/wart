= mac! (mu '(name params . body)
  (eval `(= ,name (mu ',params
                    (eval ((fn() ,@body)))))))

mac! def!(name params . body)
  `(= ,name (fn ,params ,@body))

mac! do body
  `((fn() ,@body))

def! prn args
  (if args
    (do
      pr car.args
      prn @cdr.args
      car.args)
    (pr "
"))

mac! def(name params . body)
  if bound?.name
    (prn "redef: " name)
  `(def! ,name ,params ,@body)

mac! mac(name params . body)
  if bound?.name
    (prn "redef: " name)
  `(mac! ,name ,params ,@body)

mac alias(new old) ; include later refinements
  `(mac ,new $args
     `(,,old ,@$args))

def compose(f g)
  mu 'args
    eval `(,f (,g ,@args))

prn ((compose not cons?) 34)
