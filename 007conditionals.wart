(mac iflet(var expr then . rest)
  (w/uniq gv
    `(let ,gv ,expr
       (if ,gv (let ,var ,gv ,then) ,@rest))))

(mac whenlet(var expr . body)
  `(iflet ,var ,expr (do ,@body)))

(mac aif(expr . body)
  `(let it ,expr
     (if it
         ,@(if (cddr body)
               `(,(car body) (aif ,@(cdr body)))
               body))))

(mac awhen(expr . body)
  `(let it ,expr (if it (do ,@body))))

(mac aand args
  (if (no args)
      't
      (no (cdr args))
       (car args)
      `(let it ,(car args) (and it (aand ,@(cdr args))))))

(mac rfn(name parms . body)
  `(labels ((,name ,parms ,@body))
     #',name))

(mac afn(parms . body)
  `(rfn self ,parms ,@body))

(mac in(x . choices)
  (w/uniq g
    `(let ,g ,x
       (or ,@(map (fn (c) `(is ,g ,c)) choices)))))

(mac caselet(var expr . args)
  (let ex (afn(args)
            (if (no (cdr args))
                (car args)
                `(if (iso ,var ',(car args))
                     ,(cadr args)
                     ,(self (cddr args)))))
    `(let ,var ,expr ,(call ex args))))

(mac wart-case(expr . args)
  `(caselet ,(uniq) ,expr ,@args))
(special-form case wart-case)
